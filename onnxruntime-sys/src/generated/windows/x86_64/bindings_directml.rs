/* automatically generated by rust-bindgen 0.60.1 */

pub const ORT_API_VERSION: u32 = 16;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type ULONG = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type SIZE_T = ULONG_PTR;
pub type WCHAR = wchar_t;
pub type LPCWSTR = *const WCHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type HRESULT = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    fn test_field_Data1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_GUID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data1)
            )
        );
    }
    test_field_Data1();
    fn test_field_Data2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_GUID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data2)
            )
        );
    }
    test_field_Data2();
    fn test_field_Data3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_GUID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data3)
            )
        );
    }
    test_field_Data3();
    fn test_field_Data4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_GUID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data4)
            )
        );
    }
    test_field_Data4();
}
pub type GUID = _GUID;
pub type IID = GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknownVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut IUnknown,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut IUnknown) -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(This: *mut IUnknown) -> ULONG>,
}
#[test]
fn bindgen_test_layout_IUnknownVtbl() {
    assert_eq!(
        ::std::mem::size_of::<IUnknownVtbl>(),
        24usize,
        concat!("Size of: ", stringify!(IUnknownVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnknownVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnknownVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IUnknownVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(IUnknownVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IUnknownVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(IUnknownVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IUnknownVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(IUnknownVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknown {
    pub lpVtbl: *mut IUnknownVtbl,
}
#[test]
fn bindgen_test_layout_IUnknown() {
    assert_eq!(
        ::std::mem::size_of::<IUnknown>(),
        8usize,
        concat!("Size of: ", stringify!(IUnknown))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnknown>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnknown))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IUnknown>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(IUnknown),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DXGI_SAMPLE_DESC {
    pub Count: UINT,
    pub Quality: UINT,
}
#[test]
fn bindgen_test_layout_DXGI_SAMPLE_DESC() {
    assert_eq!(
        ::std::mem::size_of::<DXGI_SAMPLE_DESC>(),
        8usize,
        concat!("Size of: ", stringify!(DXGI_SAMPLE_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<DXGI_SAMPLE_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(DXGI_SAMPLE_DESC))
    );
    fn test_field_Count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DXGI_SAMPLE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(DXGI_SAMPLE_DESC),
                "::",
                stringify!(Count)
            )
        );
    }
    test_field_Count();
    fn test_field_Quality() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DXGI_SAMPLE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Quality) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(DXGI_SAMPLE_DESC),
                "::",
                stringify!(Quality)
            )
        );
    }
    test_field_Quality();
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum DXGI_FORMAT {
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_P208 = 130,
    DXGI_FORMAT_V208 = 131,
    DXGI_FORMAT_V408 = 132,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190,
    DXGI_FORMAT_FORCE_UINT = -1,
}
pub type D3D12_GPU_VIRTUAL_ADDRESS = UINT64;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_COMMAND_LIST_TYPE {
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY = 3,
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_COMMAND_QUEUE_FLAGS {
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_COMMAND_QUEUE_DESC {
    pub Type: D3D12_COMMAND_LIST_TYPE,
    pub Priority: INT,
    pub Flags: D3D12_COMMAND_QUEUE_FLAGS,
    pub NodeMask: UINT,
}
#[test]
fn bindgen_test_layout_D3D12_COMMAND_QUEUE_DESC() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_COMMAND_QUEUE_DESC>(),
        16usize,
        concat!("Size of: ", stringify!(D3D12_COMMAND_QUEUE_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_COMMAND_QUEUE_DESC>(),
        4usize,
        concat!("Alignment of ", stringify!(D3D12_COMMAND_QUEUE_DESC))
    );
    fn test_field_Type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_COMMAND_QUEUE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_COMMAND_QUEUE_DESC),
                "::",
                stringify!(Type)
            )
        );
    }
    test_field_Type();
    fn test_field_Priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_COMMAND_QUEUE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_COMMAND_QUEUE_DESC),
                "::",
                stringify!(Priority)
            )
        );
    }
    test_field_Priority();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_COMMAND_QUEUE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_COMMAND_QUEUE_DESC),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_NodeMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_COMMAND_QUEUE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NodeMask) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_COMMAND_QUEUE_DESC),
                "::",
                stringify!(NodeMask)
            )
        );
    }
    test_field_NodeMask();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_BOX {
    pub left: UINT,
    pub top: UINT,
    pub front: UINT,
    pub right: UINT,
    pub bottom: UINT,
    pub back: UINT,
}
#[test]
fn bindgen_test_layout_D3D12_BOX() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_BOX>(),
        24usize,
        concat!("Size of: ", stringify!(D3D12_BOX))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_BOX>(),
        4usize,
        concat!("Alignment of ", stringify!(D3D12_BOX))
    );
    fn test_field_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(left)
            )
        );
    }
    test_field_left();
    fn test_field_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(top)
            )
        );
    }
    test_field_top();
    fn test_field_front() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).front) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(front)
            )
        );
    }
    test_field_front();
    fn test_field_right() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(right)
            )
        );
    }
    test_field_right();
    fn test_field_bottom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(bottom)
            )
        );
    }
    test_field_bottom();
    fn test_field_back() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_BOX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).back) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_BOX),
                "::",
                stringify!(back)
            )
        );
    }
    test_field_back();
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_HEAP_TYPE {
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD = 2,
    D3D12_HEAP_TYPE_READBACK = 3,
    D3D12_HEAP_TYPE_CUSTOM = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_CPU_PAGE_PROPERTY {
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_MEMORY_POOL {
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1,
    D3D12_MEMORY_POOL_L1 = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_HEAP_PROPERTIES {
    pub Type: D3D12_HEAP_TYPE,
    pub CPUPageProperty: D3D12_CPU_PAGE_PROPERTY,
    pub MemoryPoolPreference: D3D12_MEMORY_POOL,
    pub CreationNodeMask: UINT,
    pub VisibleNodeMask: UINT,
}
#[test]
fn bindgen_test_layout_D3D12_HEAP_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_HEAP_PROPERTIES>(),
        20usize,
        concat!("Size of: ", stringify!(D3D12_HEAP_PROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_HEAP_PROPERTIES>(),
        4usize,
        concat!("Alignment of ", stringify!(D3D12_HEAP_PROPERTIES))
    );
    fn test_field_Type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_PROPERTIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_PROPERTIES),
                "::",
                stringify!(Type)
            )
        );
    }
    test_field_Type();
    fn test_field_CPUPageProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_PROPERTIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CPUPageProperty) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_PROPERTIES),
                "::",
                stringify!(CPUPageProperty)
            )
        );
    }
    test_field_CPUPageProperty();
    fn test_field_MemoryPoolPreference() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_PROPERTIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryPoolPreference) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_PROPERTIES),
                "::",
                stringify!(MemoryPoolPreference)
            )
        );
    }
    test_field_MemoryPoolPreference();
    fn test_field_CreationNodeMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_PROPERTIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreationNodeMask) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_PROPERTIES),
                "::",
                stringify!(CreationNodeMask)
            )
        );
    }
    test_field_CreationNodeMask();
    fn test_field_VisibleNodeMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_PROPERTIES>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VisibleNodeMask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_PROPERTIES),
                "::",
                stringify!(VisibleNodeMask)
            )
        );
    }
    test_field_VisibleNodeMask();
}
impl D3D12_HEAP_FLAGS {
    pub const D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES: D3D12_HEAP_FLAGS =
        D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_NONE;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_HEAP_FLAGS {
    D3D12_HEAP_FLAG_NONE = 0,
    D3D12_HEAP_FLAG_SHARED = 1,
    D3D12_HEAP_FLAG_DENY_BUFFERS = 4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256,
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512,
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024,
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048,
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_HEAP_DESC {
    pub SizeInBytes: UINT64,
    pub Properties: D3D12_HEAP_PROPERTIES,
    pub Alignment: UINT64,
    pub Flags: D3D12_HEAP_FLAGS,
}
#[test]
fn bindgen_test_layout_D3D12_HEAP_DESC() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_HEAP_DESC>(),
        48usize,
        concat!("Size of: ", stringify!(D3D12_HEAP_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_HEAP_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(D3D12_HEAP_DESC))
    );
    fn test_field_SizeInBytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeInBytes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_DESC),
                "::",
                stringify!(SizeInBytes)
            )
        );
    }
    test_field_SizeInBytes();
    fn test_field_Properties() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Properties) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_DESC),
                "::",
                stringify!(Properties)
            )
        );
    }
    test_field_Properties();
    fn test_field_Alignment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alignment) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_DESC),
                "::",
                stringify!(Alignment)
            )
        );
    }
    test_field_Alignment();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_HEAP_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_HEAP_DESC),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_RESOURCE_DIMENSION {
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_TEXTURE_LAYOUT {
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_RESOURCE_FLAGS {
    D3D12_RESOURCE_FLAG_NONE = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32,
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64,
    D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128,
    D3D12_RESOURCE_FLAG_RAYTRACING_ACCELERATION_STRUCTURE = 256,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_RESOURCE_DESC {
    pub Dimension: D3D12_RESOURCE_DIMENSION,
    pub Alignment: UINT64,
    pub Width: UINT64,
    pub Height: UINT,
    pub DepthOrArraySize: UINT16,
    pub MipLevels: UINT16,
    pub Format: DXGI_FORMAT,
    pub SampleDesc: DXGI_SAMPLE_DESC,
    pub Layout: D3D12_TEXTURE_LAYOUT,
    pub Flags: D3D12_RESOURCE_FLAGS,
}
#[test]
fn bindgen_test_layout_D3D12_RESOURCE_DESC() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_RESOURCE_DESC>(),
        56usize,
        concat!("Size of: ", stringify!(D3D12_RESOURCE_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_RESOURCE_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(D3D12_RESOURCE_DESC))
    );
    fn test_field_Dimension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Dimension) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Dimension)
            )
        );
    }
    test_field_Dimension();
    fn test_field_Alignment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alignment) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Alignment)
            )
        );
    }
    test_field_Alignment();
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_Height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Height)
            )
        );
    }
    test_field_Height();
    fn test_field_DepthOrArraySize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DepthOrArraySize) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(DepthOrArraySize)
            )
        );
    }
    test_field_DepthOrArraySize();
    fn test_field_MipLevels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MipLevels) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(MipLevels)
            )
        );
    }
    test_field_MipLevels();
    fn test_field_Format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Format) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Format)
            )
        );
    }
    test_field_Format();
    fn test_field_SampleDesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SampleDesc) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(SampleDesc)
            )
        );
    }
    test_field_SampleDesc();
    fn test_field_Layout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Layout) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Layout)
            )
        );
    }
    test_field_Layout();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RESOURCE_DESC>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RESOURCE_DESC),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_RANGE {
    pub Begin: SIZE_T,
    pub End: SIZE_T,
}
#[test]
fn bindgen_test_layout_D3D12_RANGE() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_RANGE>(),
        16usize,
        concat!("Size of: ", stringify!(D3D12_RANGE))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_RANGE>(),
        8usize,
        concat!("Alignment of ", stringify!(D3D12_RANGE))
    );
    fn test_field_Begin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RANGE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Begin) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RANGE),
                "::",
                stringify!(Begin)
            )
        );
    }
    test_field_Begin();
    fn test_field_End() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_RANGE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).End) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_RANGE),
                "::",
                stringify!(End)
            )
        );
    }
    test_field_End();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_TILED_RESOURCE_COORDINATE {
    pub X: UINT,
    pub Y: UINT,
    pub Z: UINT,
    pub Subresource: UINT,
}
#[test]
fn bindgen_test_layout_D3D12_TILED_RESOURCE_COORDINATE() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_TILED_RESOURCE_COORDINATE>(),
        16usize,
        concat!("Size of: ", stringify!(D3D12_TILED_RESOURCE_COORDINATE))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_TILED_RESOURCE_COORDINATE>(),
        4usize,
        concat!("Alignment of ", stringify!(D3D12_TILED_RESOURCE_COORDINATE))
    );
    fn test_field_X() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILED_RESOURCE_COORDINATE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILED_RESOURCE_COORDINATE),
                "::",
                stringify!(X)
            )
        );
    }
    test_field_X();
    fn test_field_Y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILED_RESOURCE_COORDINATE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILED_RESOURCE_COORDINATE),
                "::",
                stringify!(Y)
            )
        );
    }
    test_field_Y();
    fn test_field_Z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILED_RESOURCE_COORDINATE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILED_RESOURCE_COORDINATE),
                "::",
                stringify!(Z)
            )
        );
    }
    test_field_Z();
    fn test_field_Subresource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILED_RESOURCE_COORDINATE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Subresource) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILED_RESOURCE_COORDINATE),
                "::",
                stringify!(Subresource)
            )
        );
    }
    test_field_Subresource();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_TILE_REGION_SIZE {
    pub NumTiles: UINT,
    pub UseBox: BOOL,
    pub Width: UINT,
    pub Height: UINT16,
    pub Depth: UINT16,
}
#[test]
fn bindgen_test_layout_D3D12_TILE_REGION_SIZE() {
    assert_eq!(
        ::std::mem::size_of::<D3D12_TILE_REGION_SIZE>(),
        16usize,
        concat!("Size of: ", stringify!(D3D12_TILE_REGION_SIZE))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12_TILE_REGION_SIZE>(),
        4usize,
        concat!("Alignment of ", stringify!(D3D12_TILE_REGION_SIZE))
    );
    fn test_field_NumTiles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILE_REGION_SIZE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NumTiles) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILE_REGION_SIZE),
                "::",
                stringify!(NumTiles)
            )
        );
    }
    test_field_NumTiles();
    fn test_field_UseBox() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILE_REGION_SIZE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseBox) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILE_REGION_SIZE),
                "::",
                stringify!(UseBox)
            )
        );
    }
    test_field_UseBox();
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILE_REGION_SIZE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILE_REGION_SIZE),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_Height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILE_REGION_SIZE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILE_REGION_SIZE),
                "::",
                stringify!(Height)
            )
        );
    }
    test_field_Height();
    fn test_field_Depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12_TILE_REGION_SIZE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Depth) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12_TILE_REGION_SIZE),
                "::",
                stringify!(Depth)
            )
        );
    }
    test_field_Depth();
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_TILE_RANGE_FLAGS {
    D3D12_TILE_RANGE_FLAG_NONE = 0,
    D3D12_TILE_RANGE_FLAG_NULL = 1,
    D3D12_TILE_RANGE_FLAG_SKIP = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum D3D12_TILE_MAPPING_FLAGS {
    D3D12_TILE_MAPPING_FLAG_NONE = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12HeapVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Heap) -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Heap) -> ULONG>,
    pub GetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            guid: *const GUID,
            pDataSize: *mut UINT,
            pData: *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            guid: *const GUID,
            DataSize: UINT,
            pData: *const ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateDataInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            guid: *const GUID,
            pData: *const IUnknown,
        ) -> HRESULT,
    >,
    pub SetName: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Heap, Name: LPCWSTR) -> HRESULT,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            riid: *const IID,
            ppvDevice: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub GetDesc: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Heap,
            RetVal: *mut D3D12_HEAP_DESC,
        ) -> *mut D3D12_HEAP_DESC,
    >,
}
#[test]
fn bindgen_test_layout_ID3D12HeapVtbl() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12HeapVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(ID3D12HeapVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12HeapVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12HeapVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
    fn test_field_GetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrivateData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(GetPrivateData)
            )
        );
    }
    test_field_GetPrivateData();
    fn test_field_SetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(SetPrivateData)
            )
        );
    }
    test_field_SetPrivateData();
    fn test_field_SetPrivateDataInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateDataInterface) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(SetPrivateDataInterface)
            )
        );
    }
    test_field_SetPrivateDataInterface();
    fn test_field_SetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(SetName)
            )
        );
    }
    test_field_SetName();
    fn test_field_GetDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(GetDevice)
            )
        );
    }
    test_field_GetDevice();
    fn test_field_GetDesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12HeapVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDesc) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12HeapVtbl),
                "::",
                stringify!(GetDesc)
            )
        );
    }
    test_field_GetDesc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Heap {
    pub lpVtbl: *mut ID3D12HeapVtbl,
}
#[test]
fn bindgen_test_layout_ID3D12Heap() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Heap>(),
        8usize,
        concat!("Size of: ", stringify!(ID3D12Heap))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Heap>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12Heap))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12Heap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12Heap),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12ResourceVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Resource) -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Resource) -> ULONG>,
    pub GetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            guid: *const GUID,
            pDataSize: *mut UINT,
            pData: *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            guid: *const GUID,
            DataSize: UINT,
            pData: *const ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateDataInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            guid: *const GUID,
            pData: *const IUnknown,
        ) -> HRESULT,
    >,
    pub SetName: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Resource, Name: LPCWSTR) -> HRESULT,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            riid: *const IID,
            ppvDevice: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub Map: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            Subresource: UINT,
            pReadRange: *const D3D12_RANGE,
            ppData: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub Unmap: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            Subresource: UINT,
            pWrittenRange: *const D3D12_RANGE,
        ),
    >,
    pub GetDesc: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            RetVal: *mut D3D12_RESOURCE_DESC,
        ) -> *mut D3D12_RESOURCE_DESC,
    >,
    pub GetGPUVirtualAddress: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Resource) -> D3D12_GPU_VIRTUAL_ADDRESS,
    >,
    pub WriteToSubresource: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            DstSubresource: UINT,
            pDstBox: *const D3D12_BOX,
            pSrcData: *const ::std::os::raw::c_void,
            SrcRowPitch: UINT,
            SrcDepthPitch: UINT,
        ) -> HRESULT,
    >,
    pub ReadFromSubresource: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            pDstData: *mut ::std::os::raw::c_void,
            DstRowPitch: UINT,
            DstDepthPitch: UINT,
            SrcSubresource: UINT,
            pSrcBox: *const D3D12_BOX,
        ) -> HRESULT,
    >,
    pub GetHeapProperties: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Resource,
            pHeapProperties: *mut D3D12_HEAP_PROPERTIES,
            pHeapFlags: *mut D3D12_HEAP_FLAGS,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_ID3D12ResourceVtbl() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12ResourceVtbl>(),
        120usize,
        concat!("Size of: ", stringify!(ID3D12ResourceVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12ResourceVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12ResourceVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
    fn test_field_GetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrivateData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(GetPrivateData)
            )
        );
    }
    test_field_GetPrivateData();
    fn test_field_SetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(SetPrivateData)
            )
        );
    }
    test_field_SetPrivateData();
    fn test_field_SetPrivateDataInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateDataInterface) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(SetPrivateDataInterface)
            )
        );
    }
    test_field_SetPrivateDataInterface();
    fn test_field_SetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(SetName)
            )
        );
    }
    test_field_SetName();
    fn test_field_GetDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(GetDevice)
            )
        );
    }
    test_field_GetDevice();
    fn test_field_Map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(Map)
            )
        );
    }
    test_field_Map();
    fn test_field_Unmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Unmap) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(Unmap)
            )
        );
    }
    test_field_Unmap();
    fn test_field_GetDesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDesc) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(GetDesc)
            )
        );
    }
    test_field_GetDesc();
    fn test_field_GetGPUVirtualAddress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetGPUVirtualAddress) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(GetGPUVirtualAddress)
            )
        );
    }
    test_field_GetGPUVirtualAddress();
    fn test_field_WriteToSubresource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WriteToSubresource) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(WriteToSubresource)
            )
        );
    }
    test_field_WriteToSubresource();
    fn test_field_ReadFromSubresource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReadFromSubresource) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(ReadFromSubresource)
            )
        );
    }
    test_field_ReadFromSubresource();
    fn test_field_GetHeapProperties() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12ResourceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetHeapProperties) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12ResourceVtbl),
                "::",
                stringify!(GetHeapProperties)
            )
        );
    }
    test_field_GetHeapProperties();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    pub lpVtbl: *mut ID3D12ResourceVtbl,
}
#[test]
fn bindgen_test_layout_ID3D12Resource() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Resource>(),
        8usize,
        concat!("Size of: ", stringify!(ID3D12Resource))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Resource>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12Resource))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12Resource>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12Resource),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12FenceVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Fence,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Fence) -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Fence) -> ULONG>,
    pub GetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Fence,
            guid: *const GUID,
            pDataSize: *mut UINT,
            pData: *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Fence,
            guid: *const GUID,
            DataSize: UINT,
            pData: *const ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateDataInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Fence,
            guid: *const GUID,
            pData: *const IUnknown,
        ) -> HRESULT,
    >,
    pub SetName: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Fence, Name: LPCWSTR) -> HRESULT,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12Fence,
            riid: *const IID,
            ppvDevice: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub GetCompletedValue:
        ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12Fence) -> UINT64>,
    pub SetEventOnCompletion: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Fence, Value: UINT64, hEvent: HANDLE) -> HRESULT,
    >,
    pub Signal: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12Fence, Value: UINT64) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_ID3D12FenceVtbl() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12FenceVtbl>(),
        88usize,
        concat!("Size of: ", stringify!(ID3D12FenceVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12FenceVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12FenceVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
    fn test_field_GetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrivateData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(GetPrivateData)
            )
        );
    }
    test_field_GetPrivateData();
    fn test_field_SetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(SetPrivateData)
            )
        );
    }
    test_field_SetPrivateData();
    fn test_field_SetPrivateDataInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateDataInterface) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(SetPrivateDataInterface)
            )
        );
    }
    test_field_SetPrivateDataInterface();
    fn test_field_SetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(SetName)
            )
        );
    }
    test_field_SetName();
    fn test_field_GetDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(GetDevice)
            )
        );
    }
    test_field_GetDevice();
    fn test_field_GetCompletedValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCompletedValue) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(GetCompletedValue)
            )
        );
    }
    test_field_GetCompletedValue();
    fn test_field_SetEventOnCompletion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetEventOnCompletion) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(SetEventOnCompletion)
            )
        );
    }
    test_field_SetEventOnCompletion();
    fn test_field_Signal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12FenceVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Signal) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12FenceVtbl),
                "::",
                stringify!(Signal)
            )
        );
    }
    test_field_Signal();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Fence {
    pub lpVtbl: *mut ID3D12FenceVtbl,
}
#[test]
fn bindgen_test_layout_ID3D12Fence() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12Fence>(),
        8usize,
        concat!("Size of: ", stringify!(ID3D12Fence))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12Fence>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12Fence))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12Fence>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12Fence),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandListVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandList,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12CommandList) -> ULONG>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12CommandList) -> ULONG>,
    pub GetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandList,
            guid: *const GUID,
            pDataSize: *mut UINT,
            pData: *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandList,
            guid: *const GUID,
            DataSize: UINT,
            pData: *const ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateDataInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandList,
            guid: *const GUID,
            pData: *const IUnknown,
        ) -> HRESULT,
    >,
    pub SetName: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12CommandList, Name: LPCWSTR) -> HRESULT,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandList,
            riid: *const IID,
            ppvDevice: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub GetType: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12CommandList) -> D3D12_COMMAND_LIST_TYPE,
    >,
}
#[test]
fn bindgen_test_layout_ID3D12CommandListVtbl() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12CommandListVtbl>(),
        72usize,
        concat!("Size of: ", stringify!(ID3D12CommandListVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12CommandListVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12CommandListVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
    fn test_field_GetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrivateData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(GetPrivateData)
            )
        );
    }
    test_field_GetPrivateData();
    fn test_field_SetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(SetPrivateData)
            )
        );
    }
    test_field_SetPrivateData();
    fn test_field_SetPrivateDataInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateDataInterface) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(SetPrivateDataInterface)
            )
        );
    }
    test_field_SetPrivateDataInterface();
    fn test_field_SetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(SetName)
            )
        );
    }
    test_field_SetName();
    fn test_field_GetDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(GetDevice)
            )
        );
    }
    test_field_GetDevice();
    fn test_field_GetType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandListVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetType) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandListVtbl),
                "::",
                stringify!(GetType)
            )
        );
    }
    test_field_GetType();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandList {
    pub lpVtbl: *mut ID3D12CommandListVtbl,
}
#[test]
fn bindgen_test_layout_ID3D12CommandList() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12CommandList>(),
        8usize,
        concat!("Size of: ", stringify!(ID3D12CommandList))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12CommandList>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12CommandList))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandList),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueueVtbl {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            riid: *const IID,
            ppvObject: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12CommandQueue) -> ULONG>,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12CommandQueue) -> ULONG>,
    pub GetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            guid: *const GUID,
            pDataSize: *mut UINT,
            pData: *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateData: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            guid: *const GUID,
            DataSize: UINT,
            pData: *const ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub SetPrivateDataInterface: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            guid: *const GUID,
            pData: *const IUnknown,
        ) -> HRESULT,
    >,
    pub SetName: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12CommandQueue, Name: LPCWSTR) -> HRESULT,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            riid: *const IID,
            ppvDevice: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub UpdateTileMappings: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            pResource: *mut ID3D12Resource,
            NumResourceRegions: UINT,
            pResourceRegionStartCoordinates: *const D3D12_TILED_RESOURCE_COORDINATE,
            pResourceRegionSizes: *const D3D12_TILE_REGION_SIZE,
            pHeap: *mut ID3D12Heap,
            NumRanges: UINT,
            pRangeFlags: *const D3D12_TILE_RANGE_FLAGS,
            pHeapRangeStartOffsets: *const UINT,
            pRangeTileCounts: *const UINT,
            Flags: D3D12_TILE_MAPPING_FLAGS,
        ),
    >,
    pub CopyTileMappings: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            pDstResource: *mut ID3D12Resource,
            pDstRegionStartCoordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
            pSrcResource: *mut ID3D12Resource,
            pSrcRegionStartCoordinate: *const D3D12_TILED_RESOURCE_COORDINATE,
            pRegionSize: *const D3D12_TILE_REGION_SIZE,
            Flags: D3D12_TILE_MAPPING_FLAGS,
        ),
    >,
    pub ExecuteCommandLists: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            NumCommandLists: UINT,
            ppCommandLists: *const *mut ID3D12CommandList,
        ),
    >,
    pub SetMarker: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            Metadata: UINT,
            pData: *const ::std::os::raw::c_void,
            Size: UINT,
        ),
    >,
    pub BeginEvent: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            Metadata: UINT,
            pData: *const ::std::os::raw::c_void,
            Size: UINT,
        ),
    >,
    pub EndEvent: ::std::option::Option<unsafe extern "C" fn(This: *mut ID3D12CommandQueue)>,
    pub Signal: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            pFence: *mut ID3D12Fence,
            Value: UINT64,
        ) -> HRESULT,
    >,
    pub Wait: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            pFence: *mut ID3D12Fence,
            Value: UINT64,
        ) -> HRESULT,
    >,
    pub GetTimestampFrequency: ::std::option::Option<
        unsafe extern "C" fn(This: *mut ID3D12CommandQueue, pFrequency: *mut UINT64) -> HRESULT,
    >,
    pub GetClockCalibration: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            pGpuTimestamp: *mut UINT64,
            pCpuTimestamp: *mut UINT64,
        ) -> HRESULT,
    >,
    pub GetDesc: ::std::option::Option<
        unsafe extern "C" fn(
            This: *mut ID3D12CommandQueue,
            RetVal: *mut D3D12_COMMAND_QUEUE_DESC,
        ) -> *mut D3D12_COMMAND_QUEUE_DESC,
    >,
}
#[test]
fn bindgen_test_layout_ID3D12CommandQueueVtbl() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12CommandQueueVtbl>(),
        152usize,
        concat!("Size of: ", stringify!(ID3D12CommandQueueVtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12CommandQueueVtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12CommandQueueVtbl))
    );
    fn test_field_QueryInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(QueryInterface)
            )
        );
    }
    test_field_QueryInterface();
    fn test_field_AddRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(AddRef)
            )
        );
    }
    test_field_AddRef();
    fn test_field_Release() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(Release)
            )
        );
    }
    test_field_Release();
    fn test_field_GetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrivateData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(GetPrivateData)
            )
        );
    }
    test_field_GetPrivateData();
    fn test_field_SetPrivateData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(SetPrivateData)
            )
        );
    }
    test_field_SetPrivateData();
    fn test_field_SetPrivateDataInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPrivateDataInterface) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(SetPrivateDataInterface)
            )
        );
    }
    test_field_SetPrivateDataInterface();
    fn test_field_SetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(SetName)
            )
        );
    }
    test_field_SetName();
    fn test_field_GetDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDevice) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(GetDevice)
            )
        );
    }
    test_field_GetDevice();
    fn test_field_UpdateTileMappings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateTileMappings) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(UpdateTileMappings)
            )
        );
    }
    test_field_UpdateTileMappings();
    fn test_field_CopyTileMappings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyTileMappings) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(CopyTileMappings)
            )
        );
    }
    test_field_CopyTileMappings();
    fn test_field_ExecuteCommandLists() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExecuteCommandLists) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(ExecuteCommandLists)
            )
        );
    }
    test_field_ExecuteCommandLists();
    fn test_field_SetMarker() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetMarker) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(SetMarker)
            )
        );
    }
    test_field_SetMarker();
    fn test_field_BeginEvent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginEvent) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(BeginEvent)
            )
        );
    }
    test_field_BeginEvent();
    fn test_field_EndEvent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EndEvent) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(EndEvent)
            )
        );
    }
    test_field_EndEvent();
    fn test_field_Signal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Signal) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(Signal)
            )
        );
    }
    test_field_Signal();
    fn test_field_Wait() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Wait) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(Wait)
            )
        );
    }
    test_field_Wait();
    fn test_field_GetTimestampFrequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTimestampFrequency) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(GetTimestampFrequency)
            )
        );
    }
    test_field_GetTimestampFrequency();
    fn test_field_GetClockCalibration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClockCalibration) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(GetClockCalibration)
            )
        );
    }
    test_field_GetClockCalibration();
    fn test_field_GetDesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueueVtbl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDesc) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueueVtbl),
                "::",
                stringify!(GetDesc)
            )
        );
    }
    test_field_GetDesc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub lpVtbl: *mut ID3D12CommandQueueVtbl,
}
#[test]
fn bindgen_test_layout_ID3D12CommandQueue() {
    assert_eq!(
        ::std::mem::size_of::<ID3D12CommandQueue>(),
        8usize,
        concat!("Size of: ", stringify!(ID3D12CommandQueue))
    );
    assert_eq!(
        ::std::mem::align_of::<ID3D12CommandQueue>(),
        8usize,
        concat!("Alignment of ", stringify!(ID3D12CommandQueue))
    );
    fn test_field_lpVtbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ID3D12CommandQueue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ID3D12CommandQueue),
                "::",
                stringify!(lpVtbl)
            )
        );
    }
    test_field_lpVtbl();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDMLDevice {
    _unused: [u8; 0],
}
#[repr(i32)]
#[doc = " Copied from TensorProto::DataType"]
#[doc = " Currently, Ort doesn't support complex64, complex128"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXTensorElementDataType {
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED = 0,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT = 1,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8 = 2,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8 = 3,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16 = 4,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16 = 5,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32 = 6,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64 = 7,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING = 8,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL = 9,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16 = 10,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE = 11,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32 = 12,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64 = 13,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64 = 14,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128 = 15,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16 = 16,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN = 17,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ = 18,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2 = 19,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ = 20,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXType {
    ONNX_TYPE_UNKNOWN = 0,
    ONNX_TYPE_TENSOR = 1,
    ONNX_TYPE_SEQUENCE = 2,
    ONNX_TYPE_MAP = 3,
    ONNX_TYPE_OPAQUE = 4,
    ONNX_TYPE_SPARSETENSOR = 5,
    ONNX_TYPE_OPTIONAL = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtSparseFormat {
    ORT_SPARSE_UNDEFINED = 0,
    ORT_SPARSE_COO = 1,
    ORT_SPARSE_CSRC = 2,
    ORT_SPARSE_BLOCK_SPARSE = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtSparseIndicesFormat {
    ORT_SPARSE_COO_INDICES = 0,
    ORT_SPARSE_CSR_INNER_INDICES = 1,
    ORT_SPARSE_CSR_OUTER_INDICES = 2,
    ORT_SPARSE_BLOCK_SPARSE_INDICES = 3,
}
#[repr(i32)]
#[doc = " \\brief Logging severity levels"]
#[doc = ""]
#[doc = " In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLoggingLevel {
    #[doc = "< Verbose informational messages (least severe)."]
    ORT_LOGGING_LEVEL_VERBOSE = 0,
    #[doc = "< Informational messages."]
    ORT_LOGGING_LEVEL_INFO = 1,
    #[doc = "< Warning messages."]
    ORT_LOGGING_LEVEL_WARNING = 2,
    #[doc = "< Error messages."]
    ORT_LOGGING_LEVEL_ERROR = 3,
    #[doc = "< Fatal error messages (most severe)."]
    ORT_LOGGING_LEVEL_FATAL = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtErrorCode {
    ORT_OK = 0,
    ORT_FAIL = 1,
    ORT_INVALID_ARGUMENT = 2,
    ORT_NO_SUCHFILE = 3,
    ORT_NO_MODEL = 4,
    ORT_ENGINE_ERROR = 5,
    ORT_RUNTIME_EXCEPTION = 6,
    ORT_INVALID_PROTOBUF = 7,
    ORT_MODEL_LOADED = 8,
    ORT_NOT_IMPLEMENTED = 9,
    ORT_INVALID_GRAPH = 10,
    ORT_EP_FAIL = 11,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtOpAttrType {
    ORT_OP_ATTR_UNDEFINED = 0,
    ORT_OP_ATTR_INT = 1,
    ORT_OP_ATTR_INTS = 2,
    ORT_OP_ATTR_FLOAT = 3,
    ORT_OP_ATTR_FLOATS = 4,
    ORT_OP_ATTR_STRING = 5,
    ORT_OP_ATTR_STRINGS = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtEnv {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMemoryInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtIoBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSession {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtRunOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorTypeAndShapeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMapTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSequenceTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOptionalTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSessionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOpDomain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtModelMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadPoolParams {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadingOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtArenaCfg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtPrepackedWeightsContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCANNProviderOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtDnnlProviderOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpAttr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtLogger {
    _unused: [u8; 0],
}
pub type OrtStatusPtr = *mut OrtStatus;
#[doc = " \\brief Memory allocation interface"]
#[doc = ""]
#[doc = " Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators."]
#[doc = ""]
#[doc = " When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtAllocator {
    #[doc = "< Must be initialized to ORT_API_VERSION"]
    pub version: u32,
    #[doc = "< Returns a pointer to an allocated block of `size` bytes"]
    pub Alloc: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = "< Free a block of memory previously allocated with OrtAllocator::Alloc"]
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, p: *mut ::std::os::raw::c_void),
    >,
    #[doc = "< Return a pointer to an ::OrtMemoryInfo that describes this allocator"]
    pub Info: ::std::option::Option<
        unsafe extern "C" fn(this_: *const OrtAllocator) -> *const OrtMemoryInfo,
    >,
}
#[test]
fn bindgen_test_layout_OrtAllocator() {
    assert_eq!(
        ::std::mem::size_of::<OrtAllocator>(),
        32usize,
        concat!("Size of: ", stringify!(OrtAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtAllocator))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_Alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alloc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Alloc)
            )
        );
    }
    test_field_Alloc();
    fn test_field_Free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Free) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Free)
            )
        );
    }
    test_field_Free();
    fn test_field_Info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Info) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Info)
            )
        );
    }
    test_field_Info();
}
pub type OrtLoggingFunction = ::std::option::Option<
    unsafe extern "C" fn(
        param: *mut ::std::os::raw::c_void,
        severity: OrtLoggingLevel,
        category: *const ::std::os::raw::c_char,
        logid: *const ::std::os::raw::c_char,
        code_location: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(i32)]
#[doc = " \\brief Graph optimization level"]
#[doc = ""]
#[doc = " Refer to https://www.onnxruntime.ai/docs/performance/graph-optimizations.html#graph-optimization-levels"]
#[doc = " for an in-depth understanding of the Graph Optimization Levels."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GraphOptimizationLevel {
    ORT_DISABLE_ALL = 0,
    ORT_ENABLE_BASIC = 1,
    ORT_ENABLE_EXTENDED = 2,
    ORT_ENABLE_ALL = 99,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ExecutionMode {
    ORT_SEQUENTIAL = 0,
    ORT_PARALLEL = 1,
}
#[repr(i32)]
#[doc = " \\brief Language projection identifiers"]
#[doc = " /see OrtApi::SetLanguageProjection"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLanguageProjection {
    ORT_PROJECTION_C = 0,
    ORT_PROJECTION_CPLUSPLUS = 1,
    ORT_PROJECTION_CSHARP = 2,
    ORT_PROJECTION_PYTHON = 3,
    ORT_PROJECTION_JAVA = 4,
    ORT_PROJECTION_WINML = 5,
    ORT_PROJECTION_NODEJS = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelContext {
    _unused: [u8; 0],
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtAllocatorType {
    OrtInvalidAllocator = -1,
    OrtDeviceAllocator = 0,
    OrtArenaAllocator = 1,
}
impl OrtMemType {
    pub const OrtMemTypeCPU: OrtMemType = OrtMemType::OrtMemTypeCPUOutput;
}
#[repr(i32)]
#[doc = " \\brief Memory types for allocated memory, execution provider specific types should be extended in each provider."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtMemType {
    #[doc = "< Any CPU memory used by non-CPU execution provider"]
    OrtMemTypeCPUInput = -2,
    #[doc = "< CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED"]
    OrtMemTypeCPUOutput = -1,
    #[doc = "< The default allocator for execution provider"]
    OrtMemTypeDefault = 0,
}
#[repr(i32)]
#[doc = " \\brief This mimics OrtDevice type constants so they can be returned in the API"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtMemoryInfoDeviceType {
    OrtMemoryInfoDeviceType_CPU = 0,
    OrtMemoryInfoDeviceType_GPU = 1,
    OrtMemoryInfoDeviceType_FPGA = 2,
}
#[repr(i32)]
#[doc = " \\brief Algorithm to use for cuDNN Convolution Op"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtCudnnConvAlgoSearch {
    OrtCudnnConvAlgoSearchExhaustive = 0,
    OrtCudnnConvAlgoSearchHeuristic = 1,
    OrtCudnnConvAlgoSearchDefault = 2,
}
#[doc = " \\brief CUDA Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_CUDA"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptions {
    #[doc = " \\brief CUDA device Id"]
    #[doc = "   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief CUDA Convolution algorithm search configuration."]
    #[doc = "   See enum OrtCudnnConvAlgoSearch for more details."]
    #[doc = "   Defaults to OrtCudnnConvAlgoSearchExhaustive."]
    pub cudnn_conv_algo_search: OrtCudnnConvAlgoSearch,
    #[doc = " \\brief CUDA memory limit (To use all possible memory pass in maximum size_t)"]
    #[doc = "   Defaults to SIZE_MAX."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena"]
    #[doc = "   0 = kNextPowerOfTwo<br>"]
    #[doc = "   1 = kSameAsRequested<br>"]
    #[doc = "   Defaults to 0."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP"]
    #[doc = "   0 = Use separate streams for copying and compute."]
    #[doc = "   1 = Use the same stream for copying and compute."]
    #[doc = "   Defaults to 1."]
    #[doc = "   WARNING: Setting this to 0 may result in data races for some models."]
    #[doc = "   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream"]
    #[doc = "   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream."]
    #[doc = "   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief CUDA memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
    #[doc = " \\brief Enable TunableOp for using."]
    #[doc = "   Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default."]
    #[doc = "   This option can be overriden by environment variable ORT_CUDA_TUNABLE_OP_ENABLE."]
    pub tunable_op_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Enable TunableOp for tuning."]
    #[doc = "   Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default."]
    #[doc = "   This option can be overriden by environment variable ORT_CUDA_TUNABLE_OP_TUNING_ENABLE."]
    pub tunable_op_tuning_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Max tuning duration time limit for each instance of TunableOp."]
    #[doc = "   Defaults to 0 to disable the limit."]
    pub tunable_op_max_tuning_duration_ms: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtCUDAProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtCUDAProviderOptions>(),
        64usize,
        concat!("Size of: ", stringify!(OrtCUDAProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCUDAProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCUDAProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_cudnn_conv_algo_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cudnn_conv_algo_search) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(cudnn_conv_algo_search)
            )
        );
    }
    test_field_cudnn_conv_algo_search();
    fn test_field_gpu_mem_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(gpu_mem_limit)
            )
        );
    }
    test_field_gpu_mem_limit();
    fn test_field_arena_extend_strategy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(arena_extend_strategy)
            )
        );
    }
    test_field_arena_extend_strategy();
    fn test_field_do_copy_in_default_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(do_copy_in_default_stream)
            )
        );
    }
    test_field_do_copy_in_default_stream();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_default_memory_arena_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(default_memory_arena_cfg)
            )
        );
    }
    test_field_default_memory_arena_cfg();
    fn test_field_tunable_op_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_enable) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(tunable_op_enable)
            )
        );
    }
    test_field_tunable_op_enable();
    fn test_field_tunable_op_tuning_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_tuning_enable) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(tunable_op_tuning_enable)
            )
        );
    }
    test_field_tunable_op_tuning_enable();
    fn test_field_tunable_op_max_tuning_duration_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_max_tuning_duration_ms) as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(tunable_op_max_tuning_duration_ms)
            )
        );
    }
    test_field_tunable_op_max_tuning_duration_ms();
}
#[doc = " \\brief ROCM Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_ROCM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtROCMProviderOptions {
    #[doc = " \\brief ROCM device Id"]
    #[doc = "   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM MIOpen Convolution algorithm exaustive search option."]
    #[doc = "   Defaults to 0 (false)."]
    pub miopen_conv_exhaustive_search: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM memory limit (To use all possible memory pass in maximum size_t)"]
    #[doc = "   Defaults to SIZE_MAX."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena"]
    #[doc = "   0 = kNextPowerOfTwo<br>"]
    #[doc = "   1 = kSameAsRequested<br>"]
    #[doc = "   Defaults to 0."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP"]
    #[doc = "   0 = Use separate streams for copying and compute."]
    #[doc = "   1 = Use the same stream for copying and compute."]
    #[doc = "   Defaults to 1."]
    #[doc = "   WARNING: Setting this to 0 may result in data races for some models."]
    #[doc = "   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream"]
    #[doc = "   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream."]
    #[doc = "   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief ROCM memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
    #[doc = " \\brief Enable TunableOp for using."]
    #[doc = "   Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default."]
    #[doc = "   This option can be overriden by environment variable ORT_ROCM_TUNABLE_OP_ENABLE."]
    pub tunable_op_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Enable TunableOp for tuning."]
    #[doc = "   Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default."]
    #[doc = "   This option can be overriden by environment variable ORT_ROCM_TUNABLE_OP_TUNING_ENABLE."]
    pub tunable_op_tuning_enable: ::std::os::raw::c_int,
    #[doc = " \\brief Max tuning duration time limit for each instance of TunableOp."]
    #[doc = "   Defaults to 0 to disable the limit."]
    pub tunable_op_max_tuning_duration_ms: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtROCMProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtROCMProviderOptions>(),
        64usize,
        concat!("Size of: ", stringify!(OrtROCMProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtROCMProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtROCMProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_miopen_conv_exhaustive_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).miopen_conv_exhaustive_search) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(miopen_conv_exhaustive_search)
            )
        );
    }
    test_field_miopen_conv_exhaustive_search();
    fn test_field_gpu_mem_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(gpu_mem_limit)
            )
        );
    }
    test_field_gpu_mem_limit();
    fn test_field_arena_extend_strategy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(arena_extend_strategy)
            )
        );
    }
    test_field_arena_extend_strategy();
    fn test_field_do_copy_in_default_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(do_copy_in_default_stream)
            )
        );
    }
    test_field_do_copy_in_default_stream();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_default_memory_arena_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(default_memory_arena_cfg)
            )
        );
    }
    test_field_default_memory_arena_cfg();
    fn test_field_tunable_op_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_enable) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(tunable_op_enable)
            )
        );
    }
    test_field_tunable_op_enable();
    fn test_field_tunable_op_tuning_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_tuning_enable) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(tunable_op_tuning_enable)
            )
        );
    }
    test_field_tunable_op_tuning_enable();
    fn test_field_tunable_op_max_tuning_duration_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tunable_op_max_tuning_duration_ms) as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(tunable_op_max_tuning_duration_ms)
            )
        );
    }
    test_field_tunable_op_max_tuning_duration_ms();
}
#[doc = " \\brief TensorRT Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptions {
    #[doc = "< CUDA device id (0 = default device)"]
    pub device_id: ::std::os::raw::c_int,
    pub has_user_compute_stream: ::std::os::raw::c_int,
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    pub trt_max_partition_iterations: ::std::os::raw::c_int,
    pub trt_min_subgraph_size: ::std::os::raw::c_int,
    pub trt_max_workspace_size: usize,
    pub trt_fp16_enable: ::std::os::raw::c_int,
    pub trt_int8_enable: ::std::os::raw::c_int,
    pub trt_int8_calibration_table_name: *const ::std::os::raw::c_char,
    pub trt_int8_use_native_calibration_table: ::std::os::raw::c_int,
    pub trt_dla_enable: ::std::os::raw::c_int,
    pub trt_dla_core: ::std::os::raw::c_int,
    pub trt_dump_subgraphs: ::std::os::raw::c_int,
    pub trt_engine_cache_enable: ::std::os::raw::c_int,
    pub trt_engine_cache_path: *const ::std::os::raw::c_char,
    pub trt_engine_decryption_enable: ::std::os::raw::c_int,
    pub trt_engine_decryption_lib_path: *const ::std::os::raw::c_char,
    pub trt_force_sequential_engine_build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtTensorRTProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtTensorRTProviderOptions>(),
        104usize,
        concat!("Size of: ", stringify!(OrtTensorRTProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtTensorRTProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtTensorRTProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_trt_max_partition_iterations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_max_partition_iterations) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_max_partition_iterations)
            )
        );
    }
    test_field_trt_max_partition_iterations();
    fn test_field_trt_min_subgraph_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_min_subgraph_size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_min_subgraph_size)
            )
        );
    }
    test_field_trt_min_subgraph_size();
    fn test_field_trt_max_workspace_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_max_workspace_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_max_workspace_size)
            )
        );
    }
    test_field_trt_max_workspace_size();
    fn test_field_trt_fp16_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_fp16_enable) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_fp16_enable)
            )
        );
    }
    test_field_trt_fp16_enable();
    fn test_field_trt_int8_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_enable) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_enable)
            )
        );
    }
    test_field_trt_int8_enable();
    fn test_field_trt_int8_calibration_table_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_calibration_table_name) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_calibration_table_name)
            )
        );
    }
    test_field_trt_int8_calibration_table_name();
    fn test_field_trt_int8_use_native_calibration_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_use_native_calibration_table) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_use_native_calibration_table)
            )
        );
    }
    test_field_trt_int8_use_native_calibration_table();
    fn test_field_trt_dla_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dla_enable) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dla_enable)
            )
        );
    }
    test_field_trt_dla_enable();
    fn test_field_trt_dla_core() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dla_core) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dla_core)
            )
        );
    }
    test_field_trt_dla_core();
    fn test_field_trt_dump_subgraphs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dump_subgraphs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dump_subgraphs)
            )
        );
    }
    test_field_trt_dump_subgraphs();
    fn test_field_trt_engine_cache_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_cache_enable) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_cache_enable)
            )
        );
    }
    test_field_trt_engine_cache_enable();
    fn test_field_trt_engine_cache_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_cache_path) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_cache_path)
            )
        );
    }
    test_field_trt_engine_cache_path();
    fn test_field_trt_engine_decryption_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_decryption_enable) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_decryption_enable)
            )
        );
    }
    test_field_trt_engine_decryption_enable();
    fn test_field_trt_engine_decryption_lib_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_decryption_lib_path) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_decryption_lib_path)
            )
        );
    }
    test_field_trt_engine_decryption_lib_path();
    fn test_field_trt_force_sequential_engine_build() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_force_sequential_engine_build) as usize
                    - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_force_sequential_engine_build)
            )
        );
    }
    test_field_trt_force_sequential_engine_build();
}
#[doc = " \\brief MIGraphX Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMIGraphXProviderOptions {
    pub device_id: ::std::os::raw::c_int,
    pub migraphx_fp16_enable: ::std::os::raw::c_int,
    pub migraphx_int8_enable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtMIGraphXProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtMIGraphXProviderOptions>(),
        12usize,
        concat!("Size of: ", stringify!(OrtMIGraphXProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtMIGraphXProviderOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(OrtMIGraphXProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_migraphx_fp16_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).migraphx_fp16_enable) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(migraphx_fp16_enable)
            )
        );
    }
    test_field_migraphx_fp16_enable();
    fn test_field_migraphx_int8_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).migraphx_int8_enable) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(migraphx_int8_enable)
            )
        );
    }
    test_field_migraphx_int8_enable();
}
#[doc = " \\brief OpenVINO Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpenVINOProviderOptions {
    #[doc = " \\brief Device type string"]
    #[doc = ""]
    #[doc = " Valid settings are one of: \"CPU_FP32\", \"CPU_FP16\", \"GPU_FP32\", \"GPU_FP16\""]
    pub device_type: *const ::std::os::raw::c_char,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_vpu_fast_compile: ::std::os::raw::c_uchar,
    pub device_id: *const ::std::os::raw::c_char,
    #[doc = "< 0 = Use default number of threads"]
    pub num_of_threads: usize,
    pub cache_dir: *const ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_void,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_opencl_throttling: ::std::os::raw::c_uchar,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_dynamic_shapes: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_OrtOpenVINOProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtOpenVINOProviderOptions>(),
        56usize,
        concat!("Size of: ", stringify!(OrtOpenVINOProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtOpenVINOProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtOpenVINOProviderOptions))
    );
    fn test_field_device_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(device_type)
            )
        );
    }
    test_field_device_type();
    fn test_field_enable_vpu_fast_compile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_vpu_fast_compile) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_vpu_fast_compile)
            )
        );
    }
    test_field_enable_vpu_fast_compile();
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_num_of_threads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_of_threads) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(num_of_threads)
            )
        );
    }
    test_field_num_of_threads();
    fn test_field_cache_dir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cache_dir) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(cache_dir)
            )
        );
    }
    test_field_cache_dir();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_enable_opencl_throttling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_opencl_throttling) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_opencl_throttling)
            )
        );
    }
    test_field_enable_opencl_throttling();
    fn test_field_enable_dynamic_shapes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_dynamic_shapes) as usize - ptr as usize
            },
            49usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_dynamic_shapes)
            )
        );
    }
    test_field_enable_dynamic_shapes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTrainingApi {
    _unused: [u8; 0],
}
#[doc = " \\brief The helper interface to get the right version of OrtApi"]
#[doc = ""]
#[doc = " Get a pointer to this structure through ::OrtGetApiBase"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApiBase {
    #[doc = " \\brief Get a pointer to the requested version of the ::OrtApi"]
    #[doc = ""]
    #[doc = " \\param[in] version Must be ::ORT_API_VERSION"]
    #[doc = " \\return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime"]
    #[doc = "   older than the version created with this header file."]
    #[doc = ""]
    #[doc = " One can call GetVersionString() to get the version of the Onnxruntime library for logging"]
    #[doc = " and error reporting purposes."]
    pub GetApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtApi>,
    #[doc = " \\brief Returns a null terminated string of the version of the Onnxruntime library (eg: \"1.8.1\")"]
    #[doc = ""]
    #[doc = "  \\return UTF-8 encoded version string. Do not deallocate the returned buffer."]
    pub GetVersionString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_OrtApiBase() {
    assert_eq!(
        ::std::mem::size_of::<OrtApiBase>(),
        16usize,
        concat!("Size of: ", stringify!(OrtApiBase))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApiBase>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApiBase))
    );
    fn test_field_GetApi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApiBase>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApiBase),
                "::",
                stringify!(GetApi)
            )
        );
    }
    test_field_GetApi();
    fn test_field_GetVersionString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApiBase>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVersionString) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApiBase),
                "::",
                stringify!(GetVersionString)
            )
        );
    }
    test_field_GetVersionString();
}
extern "C" {
    #[doc = " \\brief The Onnxruntime library's entry point to access the C API"]
    #[doc = ""]
    #[doc = " Call this to get the a pointer to an ::OrtApiBase"]
    pub fn OrtGetApiBase() -> *const OrtApiBase;
}
#[doc = " \\brief Thread work loop function"]
#[doc = ""]
#[doc = " Onnxruntime will provide the working loop on custom thread creation"]
#[doc = " Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn"]
pub type OrtThreadWorkerFn =
    ::std::option::Option<unsafe extern "C" fn(ort_worker_fn_param: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomHandleType {
    pub __place_holder: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_OrtCustomHandleType() {
    assert_eq!(
        ::std::mem::size_of::<OrtCustomHandleType>(),
        1usize,
        concat!("Size of: ", stringify!(OrtCustomHandleType))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCustomHandleType>(),
        1usize,
        concat!("Alignment of ", stringify!(OrtCustomHandleType))
    );
    fn test_field___place_holder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomHandleType>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__place_holder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomHandleType),
                "::",
                stringify!(__place_holder)
            )
        );
    }
    test_field___place_holder();
}
pub type OrtCustomThreadHandle = *const OrtCustomHandleType;
#[doc = " \\brief Ort custom thread creation function"]
#[doc = ""]
#[doc = " The function should return a thread handle to be used in onnxruntime thread pools"]
#[doc = " Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread"]
pub type OrtCustomCreateThreadFn = ::std::option::Option<
    unsafe extern "C" fn(
        ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ort_thread_worker_fn: OrtThreadWorkerFn,
        ort_worker_fn_param: *mut ::std::os::raw::c_void,
    ) -> OrtCustomThreadHandle,
>;
#[doc = " \\brief Custom thread join function"]
#[doc = ""]
#[doc = " Onnxruntime thread pool destructor will call the function to join a custom thread."]
#[doc = " Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn"]
pub type OrtCustomJoinThreadFn =
    ::std::option::Option<unsafe extern "C" fn(ort_custom_thread_handle: OrtCustomThreadHandle)>;
pub type RegisterCustomOpsFn = ::std::option::Option<
    unsafe extern "C" fn(options: *mut OrtSessionOptions, api: *const OrtApiBase) -> *mut OrtStatus,
>;
#[doc = " \\brief Callback function for RunAsync"]
#[doc = ""]
#[doc = " \\param[in] user_data User specific data that passed back to the callback"]
#[doc = " \\param[out] outputs On succeed, outputs host inference results, on error, the value will be nullptr"]
#[doc = " \\param[out] num_outputs Number of outputs, on error, the value will be zero"]
#[doc = " \\param[out] status On error, status will provide details"]
pub type RunAsyncCallbackFn = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        outputs: *mut *mut OrtValue,
        num_outputs: usize,
        status: OrtStatusPtr,
    ),
>;
#[doc = " \\brief The C API"]
#[doc = ""]
#[doc = " All C API functions are defined inside this structure as pointers to functions."]
#[doc = " Call OrtApiBase::GetApi to get a pointer to it"]
#[doc = ""]
#[doc = " \\nosubgrouping"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApi {
    #[doc = " \\brief Create an OrtStatus from a null terminated string"]
    #[doc = ""]
    #[doc = " \\param[in] code"]
    #[doc = " \\param[in] msg A null-terminated string. Its contents will be copied."]
    #[doc = " \\return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus"]
    pub CreateStatus: ::std::option::Option<
        unsafe extern "C" fn(
            code: OrtErrorCode,
            msg: *const ::std::os::raw::c_char,
        ) -> *mut OrtStatus,
    >,
    #[doc = " \\brief Get OrtErrorCode from OrtStatus"]
    #[doc = ""]
    #[doc = " \\param[in] status"]
    #[doc = " \\return OrtErrorCode that \\p status was created with"]
    pub GetErrorCode:
        ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> OrtErrorCode>,
    #[doc = " \\brief Get error string from OrtStatus"]
    #[doc = ""]
    #[doc = " \\param[in] status"]
    #[doc = " \\return The error message inside the `status`. Do not free the returned value."]
    pub GetErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(status: *const OrtStatus) -> *const ::std::os::raw::c_char,
    >,
    pub CreateEnv: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLogger: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub EnableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub DisableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub CreateSession: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const wchar_t,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub Run: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            inputs: *const *const OrtValue,
            input_len: usize,
            output_names: *const *const ::std::os::raw::c_char,
            output_names_len: usize,
            outputs: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(options: *mut *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetOptimizedModelFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            optimized_model_filepath: *const wchar_t,
        ) -> OrtStatusPtr,
    >,
    pub CloneSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(
            in_options: *const OrtSessionOptions,
            out_options: *mut *mut OrtSessionOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionExecutionMode: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            execution_mode: ExecutionMode,
        ) -> OrtStatusPtr,
    >,
    pub EnableProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            profile_file_prefix: *const wchar_t,
        ) -> OrtStatusPtr,
    >,
    pub DisableProfiling: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetSessionLogId: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            logid: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionGraphOptimizationLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            graph_optimization_level: GraphOptimizationLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            domain: *const ::std::os::raw::c_char,
            out: *mut *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub CustomOpDomain_Add: ::std::option::Option<
        unsafe extern "C" fn(
            custom_op_domain: *mut OrtCustomOpDomain,
            op: *const OrtCustomOp,
        ) -> OrtStatusPtr,
    >,
    pub AddCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            custom_op_domain: *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_path: *const ::std::os::raw::c_char,
            library_handle: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateRunOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsSetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            run_tag: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_verbosity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_severity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            run_tag: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsUnsetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub CreateTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorWithDataAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            p_data_len: usize,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub IsTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMutableData: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const *const ::std::os::raw::c_char,
            s_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorDataLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, len: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorContent: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s: *mut ::std::os::raw::c_void,
            s_len: usize,
            offsets: *mut usize,
            offsets_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToTensorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOnnxTypeFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateTensorTypeAndShapeInfo: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr,
    >,
    pub SetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            type_: ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub SetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            dim_values: *const i64,
            dim_count: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensionsCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_values: *mut i64,
            dim_values_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetSymbolicDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_params: *mut *const ::std::os::raw::c_char,
            dim_params_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorShapeElementCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTypeInfo) -> OrtStatusPtr,
    >,
    pub GetValueType: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            type_: OrtAllocatorType,
            id: ::std::os::raw::c_int,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CreateCpuMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_: OrtAllocatorType,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CompareMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const OrtMemoryInfo,
            info2: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetName: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetId: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetMemType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemType) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtAllocatorType) -> OrtStatusPtr,
    >,
    pub AllocatorAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            size: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorFree: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            p: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *const OrtAllocator,
            out: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetAllocatorWithDefaultOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
    pub AddFreeDimensionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_denotation: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            index: ::std::os::raw::c_int,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetValueCount: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut usize) -> OrtStatusPtr,
    >,
    pub CreateValue: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const *const OrtValue,
            num_values: usize,
            value_type: ONNXType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            data_container: *const ::std::os::raw::c_void,
            data_container_size: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            in_: *const OrtValue,
            data_container: *mut ::std::os::raw::c_void,
            data_container_size: usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_string: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            index: usize,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut OrtKernelContext,
            index: usize,
            dim_values: *const i64,
            dim_count: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseEnv: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtEnv)>,
    pub ReleaseStatus: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtStatus)>,
    pub ReleaseMemoryInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMemoryInfo)>,
    pub ReleaseSession: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSession)>,
    pub ReleaseValue: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtValue)>,
    pub ReleaseRunOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtRunOptions)>,
    pub ReleaseTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTypeInfo)>,
    pub ReleaseTensorTypeAndShapeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorTypeAndShapeInfo)>,
    pub ReleaseSessionOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSessionOptions)>,
    pub ReleaseCustomOpDomain:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCustomOpDomain)>,
    pub GetDenotationFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            denotation: *mut *const ::std::os::raw::c_char,
            len: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToMapTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtMapTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToSequenceTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtSequenceTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetMapKeyType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetMapValueType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSequenceElementType: ::std::option::Option<
        unsafe extern "C" fn(
            sequence_type_info: *const OrtSequenceTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMapTypeInfo)>,
    pub ReleaseSequenceTypeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSequenceTypeInfo)>,
    pub SessionEndProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            allocator: *mut OrtAllocator,
            out: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetModelMetadata: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            out: *mut *mut OrtModelMetadata,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetProducerName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetGraphName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDomain: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataLookupCustomMetadataMap: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            key: *const ::std::os::raw::c_char,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetVersion: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            value: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseModelMetadata:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtModelMetadata)>,
    pub CreateEnvWithGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub DisablePerSessionThreads: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub CreateThreadingOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub ReleaseThreadingOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtThreadingOptions)>,
    pub ModelMetadataGetCustomMetadataMapKeys: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            keys: *mut *mut *mut ::std::os::raw::c_char,
            num_keys: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub AddFreeDimensionOverrideByName: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_name: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            out_ptr: *mut *mut *mut ::std::os::raw::c_char,
            provider_length: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut *mut ::std::os::raw::c_char,
            providers_length: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorElementLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, index: usize, out: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s_len: usize,
            index: usize,
            s: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const ::std::os::raw::c_char,
            index: usize,
        ) -> OrtStatusPtr,
    >,
    pub AddSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAllocator: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtAllocator)>,
    pub RunWithBinding: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            binding_ptr: *const OrtIoBinding,
        ) -> OrtStatusPtr,
    >,
    pub CreateIoBinding: ::std::option::Option<
        unsafe extern "C" fn(session: *mut OrtSession, out: *mut *mut OrtIoBinding) -> OrtStatusPtr,
    >,
    pub ReleaseIoBinding: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtIoBinding)>,
    pub BindInput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutputToDevice: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            mem_info_ptr: *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputNames: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            buffer: *mut *mut ::std::os::raw::c_char,
            lengths: *mut *mut usize,
            count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputValues: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            output: *mut *mut *mut OrtValue,
            output_count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Clears any previously set Inputs for an ::OrtIoBinding"]
    pub ClearBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    #[doc = " \\brief Clears any previously set Outputs for an ::OrtIoBinding"]
    pub ClearBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    pub TensorAt: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            location_values: *const i64,
            location_values_count: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub CreateAndRegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub SetLanguageProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *const OrtEnv,
            projection: OrtLanguageProjection,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetProfilingStartTimeNs: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut u64) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalSpinControl: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            allow_spinning: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub AddInitializer: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            name: *const ::std::os::raw::c_char,
            val: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLoggerAndGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_CUDA: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_ROCM: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            rocm_options: *const OrtROCMProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_OpenVINO: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options: *const OrtOpenVINOProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalDenormalAsZero: ::std::option::Option<
        unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub CreateArenaCfg: ::std::option::Option<
        unsafe extern "C" fn(
            max_mem: usize,
            arena_extend_strategy: ::std::os::raw::c_int,
            initial_chunk_size_bytes: ::std::os::raw::c_int,
            max_dead_bytes_per_chunk: ::std::os::raw::c_int,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseArenaCfg: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtArenaCfg)>,
    pub ModelMetadataGetGraphDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub GetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateArenaCfgV2: ::std::option::Option<
        unsafe extern "C" fn(
            arena_config_keys: *const *const ::std::os::raw::c_char,
            arena_config_values: *const usize,
            num_keys: usize,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub AddRunConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreatePrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtPrepackedWeightsContainer) -> OrtStatusPtr,
    >,
    pub ReleasePrepackedWeightsContainer:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtPrepackedWeightsContainer)>,
    pub CreateSessionWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const wchar_t,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArrayWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorRTProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorRTProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtTensorRTProviderOptionsV2"]
    #[doc = ""]
    #[doc = " \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    pub ReleaseTensorRTProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorRTProviderOptionsV2)>,
    pub EnableOrtCustomOps: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub RegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, allocator: *mut OrtAllocator) -> OrtStatusPtr,
    >,
    pub UnregisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, mem_info: *const OrtMemoryInfo) -> OrtStatusPtr,
    >,
    pub IsSparseTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            dense_shape: *const i64,
            dense_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCoo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_data: *const i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCsr: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            inner_indices_data: *const i64,
            inner_indices_num: usize,
            outer_indices_data: *const i64,
            outer_indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorBlockSparse: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_shape_data: *const i64,
            indices_shape_len: usize,
            indices_data: *const i32,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorWithValuesAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            dense_shape: *const i64,
            dense_shape_len: usize,
            values_shape: *const i64,
            values_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub UseCooIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_data: *mut i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseCsrIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            inner_data: *mut i64,
            inner_num: usize,
            outer_data: *mut i64,
            outer_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseBlockSparseIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_shape: *const i64,
            indices_shape_len: usize,
            indices_data: *mut i32,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorFormat: ::std::option::Option<
        unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut OrtSparseFormat) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValuesTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValues: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndicesTypeShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            num_indices: *mut usize,
            indices: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub HasValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetGPUComputeStream: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            mem_info: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetExecutionProviderApi: ::std::option::Option<
        unsafe extern "C" fn(
            provider_name: *const ::std::os::raw::c_char,
            version: u32,
            provider_api: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SynchronizeBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SynchronizeBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SessionOptionsAppendExecutionProvider_CUDA_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtCUDAProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *mut OrtCUDAProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetCUDAProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *const OrtCUDAProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtCUDAProviderOptionsV2"]
    #[doc = ""]
    #[doc = " \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    #[doc = ""]
    #[doc = " \\since Version 1.11."]
    pub ReleaseCUDAProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCUDAProviderOptionsV2)>,
    pub SessionOptionsAppendExecutionProvider_MIGraphX: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            migraphx_options: *const OrtMIGraphXProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub AddExternalInitializers: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            initializer_names: *const *const ::std::os::raw::c_char,
            initializers: *const *const OrtValue,
            initializers_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpAttr: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            type_: OrtOpAttrType,
            op_attr: *mut *mut OrtOpAttr,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOpAttr: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOpAttr)>,
    pub CreateOp: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            op_name: *const ::std::os::raw::c_char,
            domain: *const ::std::os::raw::c_char,
            version: ::std::os::raw::c_int,
            type_constraint_names: *mut *const ::std::os::raw::c_char,
            type_constraint_values: *const ONNXTensorElementDataType,
            type_constraint_count: ::std::os::raw::c_int,
            attr_values: *const *const OrtOpAttr,
            attr_count: ::std::os::raw::c_int,
            input_count: ::std::os::raw::c_int,
            output_count: ::std::os::raw::c_int,
            ort_op: *mut *mut OrtOp,
        ) -> OrtStatusPtr,
    >,
    pub InvokeOp: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            ort_op: *const OrtOp,
            input_values: *const *const OrtValue,
            input_count: ::std::os::raw::c_int,
            output_values: *const *mut OrtValue,
            output_count: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOp: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOp)>,
    pub SessionOptionsAppendExecutionProvider: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_name: *const ::std::os::raw::c_char,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub CopyKernelInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            info_copy: *mut *mut OrtKernelInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseKernelInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtKernelInfo)>,
    #[doc = " \\name Ort Training"]
    #[doc = " @{"]
    #[doc = "** \\brief Gets the Training C Api struct"]
    #[doc = "*"]
    #[doc = "* Call this function to access the ::OrtTrainingApi structure that holds pointers to functions that enable"]
    #[doc = "* training with onnxruntime."]
    #[doc = "* \\note A NULL pointer will be returned and no error message will be printed if the training api"]
    #[doc = "* is not supported with this build. A NULL pointer will be returned and an error message will be"]
    #[doc = "* printed if the provided version is unsupported, for example when using a runtime older than the"]
    #[doc = "* version created with this header file."]
    #[doc = "*"]
    #[doc = "* \\param[in] version Must be ::ORT_API_VERSION"]
    #[doc = "* \\return The ::OrtTrainingApi struct for the version requested."]
    #[doc = "*"]
    #[doc = "* \\since Version 1.13"]
    #[doc = "*/"]
    pub GetTrainingApi:
        ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtTrainingApi>,
    pub SessionOptionsAppendExecutionProvider_CANN: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cann_options: *const OrtCANNProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub CreateCANNProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtCANNProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateCANNProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            cann_options: *mut OrtCANNProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetCANNProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            cann_options: *const OrtCANNProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an OrtCANNProviderOptions"]
    #[doc = ""]
    #[doc = " \\param[in] the pointer of OrtCANNProviderOptions which will been deleted"]
    #[doc = ""]
    #[doc = " \\since Version 1.13."]
    pub ReleaseCANNProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCANNProviderOptions)>,
    pub MemoryInfoGetDeviceType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemoryInfoDeviceType),
    >,
    pub UpdateEnvWithCustomLogLevel: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *mut OrtEnv,
            log_severity_level: OrtLoggingLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpThreadAffinity: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            affinity_string: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_name: *const wchar_t,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsUsingFunction: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            registration_func_name: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_tensor: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub HasSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_Dnnl: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dnnl_options: *const OrtDnnlProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub CreateDnnlProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtDnnlProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateDnnlProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            dnnl_options: *mut OrtDnnlProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetDnnlProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            dnnl_options: *const OrtDnnlProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtDnnlProviderOptions"]
    #[doc = ""]
    #[doc = " \\since Version 1.15."]
    pub ReleaseDnnlProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtDnnlProviderOptions)>,
    pub KernelInfo_GetNodeName: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfo_GetLogger: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            logger: *mut *const OrtLogger,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetLogger: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            logger: *mut *const OrtLogger,
        ) -> OrtStatusPtr,
    >,
    pub Logger_LogMessage: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *const OrtLogger,
            log_severity_level: OrtLoggingLevel,
            message: *const ::std::os::raw::c_char,
            file_path: *const wchar_t,
            line_number: ::std::os::raw::c_int,
            func_name: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub Logger_GetLoggingSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(logger: *const OrtLogger, out: *mut OrtLoggingLevel) -> OrtStatusPtr,
    >,
    pub KernelInfoGetConstantInput_tensor: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            index: usize,
            is_constant: *mut ::std::os::raw::c_int,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToOptionalTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtOptionalTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOptionalContainedTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            optional_type_info: *const OrtOptionalTypeInfo,
            out: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetResizedStringTensorElementBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            index: usize,
            length_in_bytes: usize,
            buffer: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Returns a null terminated string of the build info including git info and cxx flags"]
    #[doc = ""]
    #[doc = " \\return UTF-8 encoded version string. Do not deallocate the returned buffer."]
    #[doc = ""]
    #[doc = " \\since Version 1.15."]
    pub GetBuildInfoString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub CreateROCMProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtROCMProviderOptions) -> OrtStatusPtr,
    >,
    pub UpdateROCMProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            rocm_options: *mut OrtROCMProviderOptions,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetROCMProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            rocm_options: *const OrtROCMProviderOptions,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtROCMProviderOptions"]
    #[doc = ""]
    #[doc = " \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    #[doc = ""]
    #[doc = " \\since Version 1.16."]
    pub ReleaseROCMProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtROCMProviderOptions)>,
    pub CreateAndRegisterAllocatorV2: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            provider_type: *const ::std::os::raw::c_char,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub RunAsync: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            input: *const *const OrtValue,
            input_len: usize,
            output_names: *const *const ::std::os::raw::c_char,
            output_names_len: usize,
            output: *mut *mut OrtValue,
            run_async_callback: RunAsyncCallbackFn,
            user_data: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub UpdateTensorRTProviderOptionsWithValue: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorRTProviderOptionsByName: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub UpdateCUDAProviderOptionsWithValue: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *mut OrtCUDAProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetCUDAProviderOptionsByName: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *const OrtCUDAProviderOptionsV2,
            key: *const ::std::os::raw::c_char,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetResource: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            resouce_version: ::std::os::raw::c_int,
            resource_id: ::std::os::raw::c_int,
            resource: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
}
#[test]
fn bindgen_test_layout_OrtApi() {
    assert_eq!(
        ::std::mem::size_of::<OrtApi>(),
        2128usize,
        concat!("Size of: ", stringify!(OrtApi))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApi>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApi))
    );
    fn test_field_CreateStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateStatus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateStatus)
            )
        );
    }
    test_field_CreateStatus();
    fn test_field_GetErrorCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetErrorCode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetErrorCode)
            )
        );
    }
    test_field_GetErrorCode();
    fn test_field_GetErrorMessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetErrorMessage) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetErrorMessage)
            )
        );
    }
    test_field_GetErrorMessage();
    fn test_field_CreateEnv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnv) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnv)
            )
        );
    }
    test_field_CreateEnv();
    fn test_field_CreateEnvWithCustomLogger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLogger) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithCustomLogger)
            )
        );
    }
    test_field_CreateEnvWithCustomLogger();
    fn test_field_EnableTelemetryEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableTelemetryEvents) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableTelemetryEvents)
            )
        );
    }
    test_field_EnableTelemetryEvents();
    fn test_field_DisableTelemetryEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableTelemetryEvents) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableTelemetryEvents)
            )
        );
    }
    test_field_DisableTelemetryEvents();
    fn test_field_CreateSession() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSession) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSession)
            )
        );
    }
    test_field_CreateSession();
    fn test_field_CreateSessionFromArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionFromArray) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionFromArray)
            )
        );
    }
    test_field_CreateSessionFromArray();
    fn test_field_Run() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Run) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(Run)
            )
        );
    }
    test_field_Run();
    fn test_field_CreateSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionOptions) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionOptions)
            )
        );
    }
    test_field_CreateSessionOptions();
    fn test_field_SetOptimizedModelFilePath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOptimizedModelFilePath) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetOptimizedModelFilePath)
            )
        );
    }
    test_field_SetOptimizedModelFilePath();
    fn test_field_CloneSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CloneSessionOptions) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CloneSessionOptions)
            )
        );
    }
    test_field_CloneSessionOptions();
    fn test_field_SetSessionExecutionMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionExecutionMode) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionExecutionMode)
            )
        );
    }
    test_field_SetSessionExecutionMode();
    fn test_field_EnableProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableProfiling) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableProfiling)
            )
        );
    }
    test_field_EnableProfiling();
    fn test_field_DisableProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableProfiling) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableProfiling)
            )
        );
    }
    test_field_DisableProfiling();
    fn test_field_EnableMemPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableMemPattern) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableMemPattern)
            )
        );
    }
    test_field_EnableMemPattern();
    fn test_field_DisableMemPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableMemPattern) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableMemPattern)
            )
        );
    }
    test_field_DisableMemPattern();
    fn test_field_EnableCpuMemArena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableCpuMemArena) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableCpuMemArena)
            )
        );
    }
    test_field_EnableCpuMemArena();
    fn test_field_DisableCpuMemArena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableCpuMemArena) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableCpuMemArena)
            )
        );
    }
    test_field_DisableCpuMemArena();
    fn test_field_SetSessionLogId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogId) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogId)
            )
        );
    }
    test_field_SetSessionLogId();
    fn test_field_SetSessionLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogVerbosityLevel) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogVerbosityLevel)
            )
        );
    }
    test_field_SetSessionLogVerbosityLevel();
    fn test_field_SetSessionLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogSeverityLevel) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogSeverityLevel)
            )
        );
    }
    test_field_SetSessionLogSeverityLevel();
    fn test_field_SetSessionGraphOptimizationLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionGraphOptimizationLevel) as usize
                    - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionGraphOptimizationLevel)
            )
        );
    }
    test_field_SetSessionGraphOptimizationLevel();
    fn test_field_SetIntraOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetIntraOpNumThreads) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetIntraOpNumThreads)
            )
        );
    }
    test_field_SetIntraOpNumThreads();
    fn test_field_SetInterOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetInterOpNumThreads) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetInterOpNumThreads)
            )
        );
    }
    test_field_SetInterOpNumThreads();
    fn test_field_CreateCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCustomOpDomain) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCustomOpDomain)
            )
        );
    }
    test_field_CreateCustomOpDomain();
    fn test_field_CustomOpDomain_Add() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CustomOpDomain_Add) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CustomOpDomain_Add)
            )
        );
    }
    test_field_CustomOpDomain_Add();
    fn test_field_AddCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddCustomOpDomain) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddCustomOpDomain)
            )
        );
    }
    test_field_AddCustomOpDomain();
    fn test_field_RegisterCustomOpsLibrary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterCustomOpsLibrary) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterCustomOpsLibrary)
            )
        );
    }
    test_field_RegisterCustomOpsLibrary();
    fn test_field_SessionGetInputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputCount) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputCount)
            )
        );
    }
    test_field_SessionGetInputCount();
    fn test_field_SessionGetOutputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputCount) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputCount)
            )
        );
    }
    test_field_SessionGetOutputCount();
    fn test_field_SessionGetOverridableInitializerCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerCount) as usize
                    - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerCount)
            )
        );
    }
    test_field_SessionGetOverridableInitializerCount();
    fn test_field_SessionGetInputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputTypeInfo) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputTypeInfo)
            )
        );
    }
    test_field_SessionGetInputTypeInfo();
    fn test_field_SessionGetOutputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputTypeInfo) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputTypeInfo)
            )
        );
    }
    test_field_SessionGetOutputTypeInfo();
    fn test_field_SessionGetOverridableInitializerTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerTypeInfo) as usize
                    - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerTypeInfo)
            )
        );
    }
    test_field_SessionGetOverridableInitializerTypeInfo();
    fn test_field_SessionGetInputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputName) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputName)
            )
        );
    }
    test_field_SessionGetInputName();
    fn test_field_SessionGetOutputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputName) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputName)
            )
        );
    }
    test_field_SessionGetOutputName();
    fn test_field_SessionGetOverridableInitializerName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerName) as usize
                    - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerName)
            )
        );
    }
    test_field_SessionGetOverridableInitializerName();
    fn test_field_CreateRunOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateRunOptions) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateRunOptions)
            )
        );
    }
    test_field_CreateRunOptions();
    fn test_field_RunOptionsSetRunLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogVerbosityLevel) as usize
                    - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunLogVerbosityLevel)
            )
        );
    }
    test_field_RunOptionsSetRunLogVerbosityLevel();
    fn test_field_RunOptionsSetRunLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogSeverityLevel) as usize
                    - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunLogSeverityLevel)
            )
        );
    }
    test_field_RunOptionsSetRunLogSeverityLevel();
    fn test_field_RunOptionsSetRunTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunTag) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunTag)
            )
        );
    }
    test_field_RunOptionsSetRunTag();
    fn test_field_RunOptionsGetRunLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogVerbosityLevel) as usize
                    - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunLogVerbosityLevel)
            )
        );
    }
    test_field_RunOptionsGetRunLogVerbosityLevel();
    fn test_field_RunOptionsGetRunLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogSeverityLevel) as usize
                    - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunLogSeverityLevel)
            )
        );
    }
    test_field_RunOptionsGetRunLogSeverityLevel();
    fn test_field_RunOptionsGetRunTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunTag) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunTag)
            )
        );
    }
    test_field_RunOptionsGetRunTag();
    fn test_field_RunOptionsSetTerminate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetTerminate) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetTerminate)
            )
        );
    }
    test_field_RunOptionsSetTerminate();
    fn test_field_RunOptionsUnsetTerminate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsUnsetTerminate) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsUnsetTerminate)
            )
        );
    }
    test_field_RunOptionsUnsetTerminate();
    fn test_field_CreateTensorAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorAsOrtValue) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorAsOrtValue)
            )
        );
    }
    test_field_CreateTensorAsOrtValue();
    fn test_field_CreateTensorWithDataAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorWithDataAsOrtValue) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorWithDataAsOrtValue)
            )
        );
    }
    test_field_CreateTensorWithDataAsOrtValue();
    fn test_field_IsTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsTensor) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(IsTensor)
            )
        );
    }
    test_field_IsTensor();
    fn test_field_GetTensorMutableData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorMutableData) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorMutableData)
            )
        );
    }
    test_field_GetTensorMutableData();
    fn test_field_FillStringTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillStringTensor) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillStringTensor)
            )
        );
    }
    test_field_FillStringTensor();
    fn test_field_GetStringTensorDataLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorDataLength) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorDataLength)
            )
        );
    }
    test_field_GetStringTensorDataLength();
    fn test_field_GetStringTensorContent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorContent) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorContent)
            )
        );
    }
    test_field_GetStringTensorContent();
    fn test_field_CastTypeInfoToTensorInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToTensorInfo) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToTensorInfo)
            )
        );
    }
    test_field_CastTypeInfoToTensorInfo();
    fn test_field_GetOnnxTypeFromTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOnnxTypeFromTypeInfo) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetOnnxTypeFromTypeInfo)
            )
        );
    }
    test_field_GetOnnxTypeFromTypeInfo();
    fn test_field_CreateTensorTypeAndShapeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorTypeAndShapeInfo) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorTypeAndShapeInfo)
            )
        );
    }
    test_field_CreateTensorTypeAndShapeInfo();
    fn test_field_SetTensorElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetTensorElementType) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetTensorElementType)
            )
        );
    }
    test_field_SetTensorElementType();
    fn test_field_SetDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDimensions) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetDimensions)
            )
        );
    }
    test_field_SetDimensions();
    fn test_field_GetTensorElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorElementType) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorElementType)
            )
        );
    }
    test_field_GetTensorElementType();
    fn test_field_GetDimensionsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDimensionsCount) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDimensionsCount)
            )
        );
    }
    test_field_GetDimensionsCount();
    fn test_field_GetDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDimensions) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDimensions)
            )
        );
    }
    test_field_GetDimensions();
    fn test_field_GetSymbolicDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSymbolicDimensions) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSymbolicDimensions)
            )
        );
    }
    test_field_GetSymbolicDimensions();
    fn test_field_GetTensorShapeElementCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorShapeElementCount) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorShapeElementCount)
            )
        );
    }
    test_field_GetTensorShapeElementCount();
    fn test_field_GetTensorTypeAndShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorTypeAndShape) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorTypeAndShape)
            )
        );
    }
    test_field_GetTensorTypeAndShape();
    fn test_field_GetTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTypeInfo) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTypeInfo)
            )
        );
    }
    test_field_GetTypeInfo();
    fn test_field_GetValueType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValueType) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValueType)
            )
        );
    }
    test_field_GetValueType();
    fn test_field_CreateMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateMemoryInfo) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateMemoryInfo)
            )
        );
    }
    test_field_CreateMemoryInfo();
    fn test_field_CreateCpuMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCpuMemoryInfo) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCpuMemoryInfo)
            )
        );
    }
    test_field_CreateCpuMemoryInfo();
    fn test_field_CompareMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompareMemoryInfo) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CompareMemoryInfo)
            )
        );
    }
    test_field_CompareMemoryInfo();
    fn test_field_MemoryInfoGetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetName) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetName)
            )
        );
    }
    test_field_MemoryInfoGetName();
    fn test_field_MemoryInfoGetId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetId) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetId)
            )
        );
    }
    test_field_MemoryInfoGetId();
    fn test_field_MemoryInfoGetMemType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetMemType) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetMemType)
            )
        );
    }
    test_field_MemoryInfoGetMemType();
    fn test_field_MemoryInfoGetType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetType) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetType)
            )
        );
    }
    test_field_MemoryInfoGetType();
    fn test_field_AllocatorAlloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorAlloc) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorAlloc)
            )
        );
    }
    test_field_AllocatorAlloc();
    fn test_field_AllocatorFree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorFree) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorFree)
            )
        );
    }
    test_field_AllocatorFree();
    fn test_field_AllocatorGetInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorGetInfo) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorGetInfo)
            )
        );
    }
    test_field_AllocatorGetInfo();
    fn test_field_GetAllocatorWithDefaultOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAllocatorWithDefaultOptions) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetAllocatorWithDefaultOptions)
            )
        );
    }
    test_field_GetAllocatorWithDefaultOptions();
    fn test_field_AddFreeDimensionOverride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverride) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddFreeDimensionOverride)
            )
        );
    }
    test_field_AddFreeDimensionOverride();
    fn test_field_GetValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValue)
            )
        );
    }
    test_field_GetValue();
    fn test_field_GetValueCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValueCount) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValueCount)
            )
        );
    }
    test_field_GetValueCount();
    fn test_field_CreateValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateValue) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateValue)
            )
        );
    }
    test_field_CreateValue();
    fn test_field_CreateOpaqueValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOpaqueValue) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOpaqueValue)
            )
        );
    }
    test_field_CreateOpaqueValue();
    fn test_field_GetOpaqueValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOpaqueValue) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetOpaqueValue)
            )
        );
    }
    test_field_GetOpaqueValue();
    fn test_field_KernelInfoGetAttribute_float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_float) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_float)
            )
        );
    }
    test_field_KernelInfoGetAttribute_float();
    fn test_field_KernelInfoGetAttribute_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_int64) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_int64)
            )
        );
    }
    test_field_KernelInfoGetAttribute_int64();
    fn test_field_KernelInfoGetAttribute_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_string) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_string)
            )
        );
    }
    test_field_KernelInfoGetAttribute_string();
    fn test_field_KernelContext_GetInputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetInputCount) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetInputCount)
            )
        );
    }
    test_field_KernelContext_GetInputCount();
    fn test_field_KernelContext_GetOutputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetOutputCount) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetOutputCount)
            )
        );
    }
    test_field_KernelContext_GetOutputCount();
    fn test_field_KernelContext_GetInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetInput) as usize - ptr as usize
            },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetInput)
            )
        );
    }
    test_field_KernelContext_GetInput();
    fn test_field_KernelContext_GetOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetOutput) as usize - ptr as usize
            },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetOutput)
            )
        );
    }
    test_field_KernelContext_GetOutput();
    fn test_field_ReleaseEnv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseEnv) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseEnv)
            )
        );
    }
    test_field_ReleaseEnv();
    fn test_field_ReleaseStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseStatus) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseStatus)
            )
        );
    }
    test_field_ReleaseStatus();
    fn test_field_ReleaseMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseMemoryInfo) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseMemoryInfo)
            )
        );
    }
    test_field_ReleaseMemoryInfo();
    fn test_field_ReleaseSession() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSession) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSession)
            )
        );
    }
    test_field_ReleaseSession();
    fn test_field_ReleaseValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseValue) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseValue)
            )
        );
    }
    test_field_ReleaseValue();
    fn test_field_ReleaseRunOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseRunOptions) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseRunOptions)
            )
        );
    }
    test_field_ReleaseRunOptions();
    fn test_field_ReleaseTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTypeInfo) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTypeInfo)
            )
        );
    }
    test_field_ReleaseTypeInfo();
    fn test_field_ReleaseTensorTypeAndShapeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTensorTypeAndShapeInfo) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTensorTypeAndShapeInfo)
            )
        );
    }
    test_field_ReleaseTensorTypeAndShapeInfo();
    fn test_field_ReleaseSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSessionOptions) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSessionOptions)
            )
        );
    }
    test_field_ReleaseSessionOptions();
    fn test_field_ReleaseCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCustomOpDomain) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseCustomOpDomain)
            )
        );
    }
    test_field_ReleaseCustomOpDomain();
    fn test_field_GetDenotationFromTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDenotationFromTypeInfo) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDenotationFromTypeInfo)
            )
        );
    }
    test_field_GetDenotationFromTypeInfo();
    fn test_field_CastTypeInfoToMapTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToMapTypeInfo) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToMapTypeInfo)
            )
        );
    }
    test_field_CastTypeInfoToMapTypeInfo();
    fn test_field_CastTypeInfoToSequenceTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToSequenceTypeInfo) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToSequenceTypeInfo)
            )
        );
    }
    test_field_CastTypeInfoToSequenceTypeInfo();
    fn test_field_GetMapKeyType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMapKeyType) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetMapKeyType)
            )
        );
    }
    test_field_GetMapKeyType();
    fn test_field_GetMapValueType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMapValueType) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetMapValueType)
            )
        );
    }
    test_field_GetMapValueType();
    fn test_field_GetSequenceElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSequenceElementType) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSequenceElementType)
            )
        );
    }
    test_field_GetSequenceElementType();
    fn test_field_ReleaseMapTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseMapTypeInfo) as usize - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseMapTypeInfo)
            )
        );
    }
    test_field_ReleaseMapTypeInfo();
    fn test_field_ReleaseSequenceTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSequenceTypeInfo) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSequenceTypeInfo)
            )
        );
    }
    test_field_ReleaseSequenceTypeInfo();
    fn test_field_SessionEndProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionEndProfiling) as usize - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionEndProfiling)
            )
        );
    }
    test_field_SessionEndProfiling();
    fn test_field_SessionGetModelMetadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetModelMetadata) as usize - ptr as usize
            },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetModelMetadata)
            )
        );
    }
    test_field_SessionGetModelMetadata();
    fn test_field_ModelMetadataGetProducerName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetProducerName) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetProducerName)
            )
        );
    }
    test_field_ModelMetadataGetProducerName();
    fn test_field_ModelMetadataGetGraphName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphName) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetGraphName)
            )
        );
    }
    test_field_ModelMetadataGetGraphName();
    fn test_field_ModelMetadataGetDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetDomain) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetDomain)
            )
        );
    }
    test_field_ModelMetadataGetDomain();
    fn test_field_ModelMetadataGetDescription() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetDescription) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetDescription)
            )
        );
    }
    test_field_ModelMetadataGetDescription();
    fn test_field_ModelMetadataLookupCustomMetadataMap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataLookupCustomMetadataMap) as usize
                    - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataLookupCustomMetadataMap)
            )
        );
    }
    test_field_ModelMetadataLookupCustomMetadataMap();
    fn test_field_ModelMetadataGetVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetVersion) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetVersion)
            )
        );
    }
    test_field_ModelMetadataGetVersion();
    fn test_field_ReleaseModelMetadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseModelMetadata) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseModelMetadata)
            )
        );
    }
    test_field_ReleaseModelMetadata();
    fn test_field_CreateEnvWithGlobalThreadPools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithGlobalThreadPools) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithGlobalThreadPools)
            )
        );
    }
    test_field_CreateEnvWithGlobalThreadPools();
    fn test_field_DisablePerSessionThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisablePerSessionThreads) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisablePerSessionThreads)
            )
        );
    }
    test_field_DisablePerSessionThreads();
    fn test_field_CreateThreadingOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateThreadingOptions) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateThreadingOptions)
            )
        );
    }
    test_field_CreateThreadingOptions();
    fn test_field_ReleaseThreadingOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseThreadingOptions) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseThreadingOptions)
            )
        );
    }
    test_field_ReleaseThreadingOptions();
    fn test_field_ModelMetadataGetCustomMetadataMapKeys() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetCustomMetadataMapKeys) as usize
                    - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetCustomMetadataMapKeys)
            )
        );
    }
    test_field_ModelMetadataGetCustomMetadataMapKeys();
    fn test_field_AddFreeDimensionOverrideByName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverrideByName) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddFreeDimensionOverrideByName)
            )
        );
    }
    test_field_AddFreeDimensionOverrideByName();
    fn test_field_GetAvailableProviders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAvailableProviders) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetAvailableProviders)
            )
        );
    }
    test_field_GetAvailableProviders();
    fn test_field_ReleaseAvailableProviders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseAvailableProviders) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseAvailableProviders)
            )
        );
    }
    test_field_ReleaseAvailableProviders();
    fn test_field_GetStringTensorElementLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorElementLength) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorElementLength)
            )
        );
    }
    test_field_GetStringTensorElementLength();
    fn test_field_GetStringTensorElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorElement) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorElement)
            )
        );
    }
    test_field_GetStringTensorElement();
    fn test_field_FillStringTensorElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillStringTensorElement) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillStringTensorElement)
            )
        );
    }
    test_field_FillStringTensorElement();
    fn test_field_AddSessionConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddSessionConfigEntry) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddSessionConfigEntry)
            )
        );
    }
    test_field_AddSessionConfigEntry();
    fn test_field_CreateAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateAllocator) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateAllocator)
            )
        );
    }
    test_field_CreateAllocator();
    fn test_field_ReleaseAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseAllocator) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseAllocator)
            )
        );
    }
    test_field_ReleaseAllocator();
    fn test_field_RunWithBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunWithBinding) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunWithBinding)
            )
        );
    }
    test_field_RunWithBinding();
    fn test_field_CreateIoBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateIoBinding) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateIoBinding)
            )
        );
    }
    test_field_CreateIoBinding();
    fn test_field_ReleaseIoBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseIoBinding) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseIoBinding)
            )
        );
    }
    test_field_ReleaseIoBinding();
    fn test_field_BindInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindInput) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindInput)
            )
        );
    }
    test_field_BindInput();
    fn test_field_BindOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindOutput) as usize - ptr as usize
            },
            1096usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindOutput)
            )
        );
    }
    test_field_BindOutput();
    fn test_field_BindOutputToDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindOutputToDevice) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindOutputToDevice)
            )
        );
    }
    test_field_BindOutputToDevice();
    fn test_field_GetBoundOutputNames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoundOutputNames) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetBoundOutputNames)
            )
        );
    }
    test_field_GetBoundOutputNames();
    fn test_field_GetBoundOutputValues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoundOutputValues) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetBoundOutputValues)
            )
        );
    }
    test_field_GetBoundOutputValues();
    fn test_field_ClearBoundInputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearBoundInputs) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ClearBoundInputs)
            )
        );
    }
    test_field_ClearBoundInputs();
    fn test_field_ClearBoundOutputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearBoundOutputs) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ClearBoundOutputs)
            )
        );
    }
    test_field_ClearBoundOutputs();
    fn test_field_TensorAt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TensorAt) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(TensorAt)
            )
        );
    }
    test_field_TensorAt();
    fn test_field_CreateAndRegisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateAndRegisterAllocator) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateAndRegisterAllocator)
            )
        );
    }
    test_field_CreateAndRegisterAllocator();
    fn test_field_SetLanguageProjection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLanguageProjection) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetLanguageProjection)
            )
        );
    }
    test_field_SetLanguageProjection();
    fn test_field_SessionGetProfilingStartTimeNs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetProfilingStartTimeNs) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetProfilingStartTimeNs)
            )
        );
    }
    test_field_SessionGetProfilingStartTimeNs();
    fn test_field_SetGlobalIntraOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalIntraOpNumThreads) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalIntraOpNumThreads)
            )
        );
    }
    test_field_SetGlobalIntraOpNumThreads();
    fn test_field_SetGlobalInterOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalInterOpNumThreads) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalInterOpNumThreads)
            )
        );
    }
    test_field_SetGlobalInterOpNumThreads();
    fn test_field_SetGlobalSpinControl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalSpinControl) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalSpinControl)
            )
        );
    }
    test_field_SetGlobalSpinControl();
    fn test_field_AddInitializer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddInitializer) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddInitializer)
            )
        );
    }
    test_field_AddInitializer();
    fn test_field_CreateEnvWithCustomLoggerAndGlobalThreadPools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLoggerAndGlobalThreadPools) as usize
                    - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithCustomLoggerAndGlobalThreadPools)
            )
        );
    }
    test_field_CreateEnvWithCustomLoggerAndGlobalThreadPools();
    fn test_field_SessionOptionsAppendExecutionProvider_CUDA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA) as usize
                    - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_CUDA)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_CUDA();
    fn test_field_SessionOptionsAppendExecutionProvider_ROCM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_ROCM) as usize
                    - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_ROCM)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_ROCM();
    fn test_field_SessionOptionsAppendExecutionProvider_OpenVINO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_OpenVINO) as usize
                    - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_OpenVINO)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_OpenVINO();
    fn test_field_SetGlobalDenormalAsZero() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalDenormalAsZero) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalDenormalAsZero)
            )
        );
    }
    test_field_SetGlobalDenormalAsZero();
    fn test_field_CreateArenaCfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateArenaCfg) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateArenaCfg)
            )
        );
    }
    test_field_CreateArenaCfg();
    fn test_field_ReleaseArenaCfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseArenaCfg) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseArenaCfg)
            )
        );
    }
    test_field_ReleaseArenaCfg();
    fn test_field_ModelMetadataGetGraphDescription() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphDescription) as usize
                    - ptr as usize
            },
            1264usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetGraphDescription)
            )
        );
    }
    test_field_ModelMetadataGetGraphDescription();
    fn test_field_SessionOptionsAppendExecutionProvider_TensorRT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT) as usize
                    - ptr as usize
            },
            1272usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_TensorRT)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_TensorRT();
    fn test_field_SetCurrentGpuDeviceId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetCurrentGpuDeviceId) as usize - ptr as usize
            },
            1280usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetCurrentGpuDeviceId)
            )
        );
    }
    test_field_SetCurrentGpuDeviceId();
    fn test_field_GetCurrentGpuDeviceId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentGpuDeviceId) as usize - ptr as usize
            },
            1288usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCurrentGpuDeviceId)
            )
        );
    }
    test_field_GetCurrentGpuDeviceId();
    fn test_field_KernelInfoGetAttributeArray_float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_float) as usize
                    - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttributeArray_float)
            )
        );
    }
    test_field_KernelInfoGetAttributeArray_float();
    fn test_field_KernelInfoGetAttributeArray_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_int64) as usize
                    - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttributeArray_int64)
            )
        );
    }
    test_field_KernelInfoGetAttributeArray_int64();
    fn test_field_CreateArenaCfgV2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateArenaCfgV2) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateArenaCfgV2)
            )
        );
    }
    test_field_CreateArenaCfgV2();
    fn test_field_AddRunConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRunConfigEntry) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddRunConfigEntry)
            )
        );
    }
    test_field_AddRunConfigEntry();
    fn test_field_CreatePrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreatePrepackedWeightsContainer) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreatePrepackedWeightsContainer)
            )
        );
    }
    test_field_CreatePrepackedWeightsContainer();
    fn test_field_ReleasePrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleasePrepackedWeightsContainer) as usize
                    - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleasePrepackedWeightsContainer)
            )
        );
    }
    test_field_ReleasePrepackedWeightsContainer();
    fn test_field_CreateSessionWithPrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionWithPrepackedWeightsContainer) as usize
                    - ptr as usize
            },
            1344usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionWithPrepackedWeightsContainer)
            )
        );
    }
    test_field_CreateSessionWithPrepackedWeightsContainer();
    fn test_field_CreateSessionFromArrayWithPrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionFromArrayWithPrepackedWeightsContainer)
                    as usize
                    - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionFromArrayWithPrepackedWeightsContainer)
            )
        );
    }
    test_field_CreateSessionFromArrayWithPrepackedWeightsContainer();
    fn test_field_SessionOptionsAppendExecutionProvider_TensorRT_V2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT_V2)
                    as usize
                    - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_TensorRT_V2)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_TensorRT_V2();
    fn test_field_CreateTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorRTProviderOptions) as usize - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorRTProviderOptions)
            )
        );
    }
    test_field_CreateTensorRTProviderOptions();
    fn test_field_UpdateTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateTensorRTProviderOptions) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateTensorRTProviderOptions)
            )
        );
    }
    test_field_UpdateTensorRTProviderOptions();
    fn test_field_GetTensorRTProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorRTProviderOptionsAsString) as usize
                    - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorRTProviderOptionsAsString)
            )
        );
    }
    test_field_GetTensorRTProviderOptionsAsString();
    fn test_field_ReleaseTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTensorRTProviderOptions) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTensorRTProviderOptions)
            )
        );
    }
    test_field_ReleaseTensorRTProviderOptions();
    fn test_field_EnableOrtCustomOps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableOrtCustomOps) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableOrtCustomOps)
            )
        );
    }
    test_field_EnableOrtCustomOps();
    fn test_field_RegisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterAllocator) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterAllocator)
            )
        );
    }
    test_field_RegisterAllocator();
    fn test_field_UnregisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UnregisterAllocator) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UnregisterAllocator)
            )
        );
    }
    test_field_UnregisterAllocator();
    fn test_field_IsSparseTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSparseTensor) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(IsSparseTensor)
            )
        );
    }
    test_field_IsSparseTensor();
    fn test_field_CreateSparseTensorAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSparseTensorAsOrtValue) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSparseTensorAsOrtValue)
            )
        );
    }
    test_field_CreateSparseTensorAsOrtValue();
    fn test_field_FillSparseTensorCoo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorCoo) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorCoo)
            )
        );
    }
    test_field_FillSparseTensorCoo();
    fn test_field_FillSparseTensorCsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorCsr) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorCsr)
            )
        );
    }
    test_field_FillSparseTensorCsr();
    fn test_field_FillSparseTensorBlockSparse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorBlockSparse) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorBlockSparse)
            )
        );
    }
    test_field_FillSparseTensorBlockSparse();
    fn test_field_CreateSparseTensorWithValuesAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSparseTensorWithValuesAsOrtValue) as usize
                    - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSparseTensorWithValuesAsOrtValue)
            )
        );
    }
    test_field_CreateSparseTensorWithValuesAsOrtValue();
    fn test_field_UseCooIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseCooIndices) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseCooIndices)
            )
        );
    }
    test_field_UseCooIndices();
    fn test_field_UseCsrIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseCsrIndices) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseCsrIndices)
            )
        );
    }
    test_field_UseCsrIndices();
    fn test_field_UseBlockSparseIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseBlockSparseIndices) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseBlockSparseIndices)
            )
        );
    }
    test_field_UseBlockSparseIndices();
    fn test_field_GetSparseTensorFormat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorFormat) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorFormat)
            )
        );
    }
    test_field_GetSparseTensorFormat();
    fn test_field_GetSparseTensorValuesTypeAndShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorValuesTypeAndShape) as usize
                    - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorValuesTypeAndShape)
            )
        );
    }
    test_field_GetSparseTensorValuesTypeAndShape();
    fn test_field_GetSparseTensorValues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorValues) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorValues)
            )
        );
    }
    test_field_GetSparseTensorValues();
    fn test_field_GetSparseTensorIndicesTypeShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorIndicesTypeShape) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorIndicesTypeShape)
            )
        );
    }
    test_field_GetSparseTensorIndicesTypeShape();
    fn test_field_GetSparseTensorIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorIndices) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorIndices)
            )
        );
    }
    test_field_GetSparseTensorIndices();
    fn test_field_HasValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasValue) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(HasValue)
            )
        );
    }
    test_field_HasValue();
    fn test_field_KernelContext_GetGPUComputeStream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetGPUComputeStream) as usize
                    - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetGPUComputeStream)
            )
        );
    }
    test_field_KernelContext_GetGPUComputeStream();
    fn test_field_GetTensorMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorMemoryInfo) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorMemoryInfo)
            )
        );
    }
    test_field_GetTensorMemoryInfo();
    fn test_field_GetExecutionProviderApi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExecutionProviderApi) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetExecutionProviderApi)
            )
        );
    }
    test_field_GetExecutionProviderApi();
    fn test_field_SessionOptionsSetCustomCreateThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomCreateThreadFn) as usize
                    - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomCreateThreadFn)
            )
        );
    }
    test_field_SessionOptionsSetCustomCreateThreadFn();
    fn test_field_SessionOptionsSetCustomThreadCreationOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomThreadCreationOptions) as usize
                    - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomThreadCreationOptions)
            )
        );
    }
    test_field_SessionOptionsSetCustomThreadCreationOptions();
    fn test_field_SessionOptionsSetCustomJoinThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomJoinThreadFn) as usize
                    - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomJoinThreadFn)
            )
        );
    }
    test_field_SessionOptionsSetCustomJoinThreadFn();
    fn test_field_SetGlobalCustomCreateThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomCreateThreadFn) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomCreateThreadFn)
            )
        );
    }
    test_field_SetGlobalCustomCreateThreadFn();
    fn test_field_SetGlobalCustomThreadCreationOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomThreadCreationOptions) as usize
                    - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomThreadCreationOptions)
            )
        );
    }
    test_field_SetGlobalCustomThreadCreationOptions();
    fn test_field_SetGlobalCustomJoinThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomJoinThreadFn) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomJoinThreadFn)
            )
        );
    }
    test_field_SetGlobalCustomJoinThreadFn();
    fn test_field_SynchronizeBoundInputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SynchronizeBoundInputs) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SynchronizeBoundInputs)
            )
        );
    }
    test_field_SynchronizeBoundInputs();
    fn test_field_SynchronizeBoundOutputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SynchronizeBoundOutputs) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SynchronizeBoundOutputs)
            )
        );
    }
    test_field_SynchronizeBoundOutputs();
    fn test_field_SessionOptionsAppendExecutionProvider_CUDA_V2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA_V2) as usize
                    - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_CUDA_V2)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_CUDA_V2();
    fn test_field_CreateCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCUDAProviderOptions) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCUDAProviderOptions)
            )
        );
    }
    test_field_CreateCUDAProviderOptions();
    fn test_field_UpdateCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateCUDAProviderOptions) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateCUDAProviderOptions)
            )
        );
    }
    test_field_UpdateCUDAProviderOptions();
    fn test_field_GetCUDAProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCUDAProviderOptionsAsString) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCUDAProviderOptionsAsString)
            )
        );
    }
    test_field_GetCUDAProviderOptionsAsString();
    fn test_field_ReleaseCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCUDAProviderOptions) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseCUDAProviderOptions)
            )
        );
    }
    test_field_ReleaseCUDAProviderOptions();
    fn test_field_SessionOptionsAppendExecutionProvider_MIGraphX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_MIGraphX) as usize
                    - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_MIGraphX)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_MIGraphX();
    fn test_field_AddExternalInitializers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddExternalInitializers) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddExternalInitializers)
            )
        );
    }
    test_field_AddExternalInitializers();
    fn test_field_CreateOpAttr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOpAttr) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOpAttr)
            )
        );
    }
    test_field_CreateOpAttr();
    fn test_field_ReleaseOpAttr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseOpAttr) as usize - ptr as usize
            },
            1696usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseOpAttr)
            )
        );
    }
    test_field_ReleaseOpAttr();
    fn test_field_CreateOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOp) as usize - ptr as usize
            },
            1704usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOp)
            )
        );
    }
    test_field_CreateOp();
    fn test_field_InvokeOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InvokeOp) as usize - ptr as usize
            },
            1712usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(InvokeOp)
            )
        );
    }
    test_field_InvokeOp();
    fn test_field_ReleaseOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseOp) as usize - ptr as usize
            },
            1720usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseOp)
            )
        );
    }
    test_field_ReleaseOp();
    fn test_field_SessionOptionsAppendExecutionProvider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider) as usize
                    - ptr as usize
            },
            1728usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider();
    fn test_field_CopyKernelInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyKernelInfo) as usize - ptr as usize
            },
            1736usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CopyKernelInfo)
            )
        );
    }
    test_field_CopyKernelInfo();
    fn test_field_ReleaseKernelInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseKernelInfo) as usize - ptr as usize
            },
            1744usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseKernelInfo)
            )
        );
    }
    test_field_ReleaseKernelInfo();
    fn test_field_GetTrainingApi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTrainingApi) as usize - ptr as usize
            },
            1752usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTrainingApi)
            )
        );
    }
    test_field_GetTrainingApi();
    fn test_field_SessionOptionsAppendExecutionProvider_CANN() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CANN) as usize
                    - ptr as usize
            },
            1760usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_CANN)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_CANN();
    fn test_field_CreateCANNProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCANNProviderOptions) as usize - ptr as usize
            },
            1768usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCANNProviderOptions)
            )
        );
    }
    test_field_CreateCANNProviderOptions();
    fn test_field_UpdateCANNProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateCANNProviderOptions) as usize - ptr as usize
            },
            1776usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateCANNProviderOptions)
            )
        );
    }
    test_field_UpdateCANNProviderOptions();
    fn test_field_GetCANNProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCANNProviderOptionsAsString) as usize - ptr as usize
            },
            1784usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCANNProviderOptionsAsString)
            )
        );
    }
    test_field_GetCANNProviderOptionsAsString();
    fn test_field_ReleaseCANNProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCANNProviderOptions) as usize - ptr as usize
            },
            1792usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseCANNProviderOptions)
            )
        );
    }
    test_field_ReleaseCANNProviderOptions();
    fn test_field_MemoryInfoGetDeviceType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetDeviceType) as usize - ptr as usize
            },
            1800usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetDeviceType)
            )
        );
    }
    test_field_MemoryInfoGetDeviceType();
    fn test_field_UpdateEnvWithCustomLogLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateEnvWithCustomLogLevel) as usize - ptr as usize
            },
            1808usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateEnvWithCustomLogLevel)
            )
        );
    }
    test_field_UpdateEnvWithCustomLogLevel();
    fn test_field_SetGlobalIntraOpThreadAffinity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalIntraOpThreadAffinity) as usize - ptr as usize
            },
            1816usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalIntraOpThreadAffinity)
            )
        );
    }
    test_field_SetGlobalIntraOpThreadAffinity();
    fn test_field_RegisterCustomOpsLibrary_V2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterCustomOpsLibrary_V2) as usize - ptr as usize
            },
            1824usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterCustomOpsLibrary_V2)
            )
        );
    }
    test_field_RegisterCustomOpsLibrary_V2();
    fn test_field_RegisterCustomOpsUsingFunction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterCustomOpsUsingFunction) as usize - ptr as usize
            },
            1832usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterCustomOpsUsingFunction)
            )
        );
    }
    test_field_RegisterCustomOpsUsingFunction();
    fn test_field_KernelInfo_GetInputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputCount) as usize - ptr as usize
            },
            1840usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetInputCount)
            )
        );
    }
    test_field_KernelInfo_GetInputCount();
    fn test_field_KernelInfo_GetOutputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputCount) as usize - ptr as usize
            },
            1848usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetOutputCount)
            )
        );
    }
    test_field_KernelInfo_GetOutputCount();
    fn test_field_KernelInfo_GetInputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputName) as usize - ptr as usize
            },
            1856usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetInputName)
            )
        );
    }
    test_field_KernelInfo_GetInputName();
    fn test_field_KernelInfo_GetOutputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputName) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetOutputName)
            )
        );
    }
    test_field_KernelInfo_GetOutputName();
    fn test_field_KernelInfo_GetInputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputTypeInfo) as usize - ptr as usize
            },
            1872usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetInputTypeInfo)
            )
        );
    }
    test_field_KernelInfo_GetInputTypeInfo();
    fn test_field_KernelInfo_GetOutputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputTypeInfo) as usize - ptr as usize
            },
            1880usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetOutputTypeInfo)
            )
        );
    }
    test_field_KernelInfo_GetOutputTypeInfo();
    fn test_field_KernelInfoGetAttribute_tensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_tensor) as usize - ptr as usize
            },
            1888usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_tensor)
            )
        );
    }
    test_field_KernelInfoGetAttribute_tensor();
    fn test_field_HasSessionConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasSessionConfigEntry) as usize - ptr as usize
            },
            1896usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(HasSessionConfigEntry)
            )
        );
    }
    test_field_HasSessionConfigEntry();
    fn test_field_GetSessionConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSessionConfigEntry) as usize - ptr as usize
            },
            1904usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSessionConfigEntry)
            )
        );
    }
    test_field_GetSessionConfigEntry();
    fn test_field_SessionOptionsAppendExecutionProvider_Dnnl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_Dnnl) as usize
                    - ptr as usize
            },
            1912usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_Dnnl)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_Dnnl();
    fn test_field_CreateDnnlProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateDnnlProviderOptions) as usize - ptr as usize
            },
            1920usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateDnnlProviderOptions)
            )
        );
    }
    test_field_CreateDnnlProviderOptions();
    fn test_field_UpdateDnnlProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateDnnlProviderOptions) as usize - ptr as usize
            },
            1928usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateDnnlProviderOptions)
            )
        );
    }
    test_field_UpdateDnnlProviderOptions();
    fn test_field_GetDnnlProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDnnlProviderOptionsAsString) as usize - ptr as usize
            },
            1936usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDnnlProviderOptionsAsString)
            )
        );
    }
    test_field_GetDnnlProviderOptionsAsString();
    fn test_field_ReleaseDnnlProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseDnnlProviderOptions) as usize - ptr as usize
            },
            1944usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseDnnlProviderOptions)
            )
        );
    }
    test_field_ReleaseDnnlProviderOptions();
    fn test_field_KernelInfo_GetNodeName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetNodeName) as usize - ptr as usize
            },
            1952usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetNodeName)
            )
        );
    }
    test_field_KernelInfo_GetNodeName();
    fn test_field_KernelInfo_GetLogger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfo_GetLogger) as usize - ptr as usize
            },
            1960usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfo_GetLogger)
            )
        );
    }
    test_field_KernelInfo_GetLogger();
    fn test_field_KernelContext_GetLogger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetLogger) as usize - ptr as usize
            },
            1968usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetLogger)
            )
        );
    }
    test_field_KernelContext_GetLogger();
    fn test_field_Logger_LogMessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Logger_LogMessage) as usize - ptr as usize
            },
            1976usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(Logger_LogMessage)
            )
        );
    }
    test_field_Logger_LogMessage();
    fn test_field_Logger_GetLoggingSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Logger_GetLoggingSeverityLevel) as usize - ptr as usize
            },
            1984usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(Logger_GetLoggingSeverityLevel)
            )
        );
    }
    test_field_Logger_GetLoggingSeverityLevel();
    fn test_field_KernelInfoGetConstantInput_tensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetConstantInput_tensor) as usize
                    - ptr as usize
            },
            1992usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetConstantInput_tensor)
            )
        );
    }
    test_field_KernelInfoGetConstantInput_tensor();
    fn test_field_CastTypeInfoToOptionalTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToOptionalTypeInfo) as usize - ptr as usize
            },
            2000usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToOptionalTypeInfo)
            )
        );
    }
    test_field_CastTypeInfoToOptionalTypeInfo();
    fn test_field_GetOptionalContainedTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOptionalContainedTypeInfo) as usize - ptr as usize
            },
            2008usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetOptionalContainedTypeInfo)
            )
        );
    }
    test_field_GetOptionalContainedTypeInfo();
    fn test_field_GetResizedStringTensorElementBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetResizedStringTensorElementBuffer) as usize
                    - ptr as usize
            },
            2016usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetResizedStringTensorElementBuffer)
            )
        );
    }
    test_field_GetResizedStringTensorElementBuffer();
    fn test_field_KernelContext_GetAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetAllocator) as usize - ptr as usize
            },
            2024usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetAllocator)
            )
        );
    }
    test_field_KernelContext_GetAllocator();
    fn test_field_GetBuildInfoString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBuildInfoString) as usize - ptr as usize
            },
            2032usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetBuildInfoString)
            )
        );
    }
    test_field_GetBuildInfoString();
    fn test_field_CreateROCMProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateROCMProviderOptions) as usize - ptr as usize
            },
            2040usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateROCMProviderOptions)
            )
        );
    }
    test_field_CreateROCMProviderOptions();
    fn test_field_UpdateROCMProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateROCMProviderOptions) as usize - ptr as usize
            },
            2048usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateROCMProviderOptions)
            )
        );
    }
    test_field_UpdateROCMProviderOptions();
    fn test_field_GetROCMProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetROCMProviderOptionsAsString) as usize - ptr as usize
            },
            2056usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetROCMProviderOptionsAsString)
            )
        );
    }
    test_field_GetROCMProviderOptionsAsString();
    fn test_field_ReleaseROCMProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseROCMProviderOptions) as usize - ptr as usize
            },
            2064usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseROCMProviderOptions)
            )
        );
    }
    test_field_ReleaseROCMProviderOptions();
    fn test_field_CreateAndRegisterAllocatorV2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateAndRegisterAllocatorV2) as usize - ptr as usize
            },
            2072usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateAndRegisterAllocatorV2)
            )
        );
    }
    test_field_CreateAndRegisterAllocatorV2();
    fn test_field_RunAsync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunAsync) as usize - ptr as usize
            },
            2080usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunAsync)
            )
        );
    }
    test_field_RunAsync();
    fn test_field_UpdateTensorRTProviderOptionsWithValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateTensorRTProviderOptionsWithValue) as usize
                    - ptr as usize
            },
            2088usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateTensorRTProviderOptionsWithValue)
            )
        );
    }
    test_field_UpdateTensorRTProviderOptionsWithValue();
    fn test_field_GetTensorRTProviderOptionsByName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorRTProviderOptionsByName) as usize
                    - ptr as usize
            },
            2096usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorRTProviderOptionsByName)
            )
        );
    }
    test_field_GetTensorRTProviderOptionsByName();
    fn test_field_UpdateCUDAProviderOptionsWithValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateCUDAProviderOptionsWithValue) as usize
                    - ptr as usize
            },
            2104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateCUDAProviderOptionsWithValue)
            )
        );
    }
    test_field_UpdateCUDAProviderOptionsWithValue();
    fn test_field_GetCUDAProviderOptionsByName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCUDAProviderOptionsByName) as usize - ptr as usize
            },
            2112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCUDAProviderOptionsByName)
            )
        );
    }
    test_field_GetCUDAProviderOptionsByName();
    fn test_field_KernelContext_GetResource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetResource) as usize - ptr as usize
            },
            2120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetResource)
            )
        );
    }
    test_field_KernelContext_GetResource();
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtCustomOpInputOutputCharacteristic {
    INPUT_OUTPUT_REQUIRED = 0,
    INPUT_OUTPUT_OPTIONAL = 1,
    INPUT_OUTPUT_VARIADIC = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOp {
    pub version: u32,
    pub CreateKernel: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetName: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetExecutionProviderType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetInputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetInputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub GetOutputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetOutputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub KernelCompute: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ),
    >,
    pub KernelDestroy:
        ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void)>,
    pub GetInputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
    pub GetOutputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
    pub GetInputMemoryType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> OrtMemType,
    >,
    pub GetVariadicInputMinArity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicInputHomogeneity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicOutputMinArity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub GetVariadicOutputHomogeneity: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int,
    >,
    pub CreateKernelV2: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
            kernel: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub KernelComputeV2: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ) -> OrtStatusPtr,
    >,
}
#[test]
fn bindgen_test_layout_OrtCustomOp() {
    assert_eq!(
        ::std::mem::size_of::<OrtCustomOp>(),
        152usize,
        concat!("Size of: ", stringify!(OrtCustomOp))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCustomOp>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCustomOp))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_CreateKernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateKernel) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(CreateKernel)
            )
        );
    }
    test_field_CreateKernel();
    fn test_field_GetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetName) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetName)
            )
        );
    }
    test_field_GetName();
    fn test_field_GetExecutionProviderType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExecutionProviderType) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetExecutionProviderType)
            )
        );
    }
    test_field_GetExecutionProviderType();
    fn test_field_GetInputType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputType) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputType)
            )
        );
    }
    test_field_GetInputType();
    fn test_field_GetInputTypeCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputTypeCount) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputTypeCount)
            )
        );
    }
    test_field_GetInputTypeCount();
    fn test_field_GetOutputType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputType) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputType)
            )
        );
    }
    test_field_GetOutputType();
    fn test_field_GetOutputTypeCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputTypeCount) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputTypeCount)
            )
        );
    }
    test_field_GetOutputTypeCount();
    fn test_field_KernelCompute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelCompute) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(KernelCompute)
            )
        );
    }
    test_field_KernelCompute();
    fn test_field_KernelDestroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelDestroy) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(KernelDestroy)
            )
        );
    }
    test_field_KernelDestroy();
    fn test_field_GetInputCharacteristic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputCharacteristic) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputCharacteristic)
            )
        );
    }
    test_field_GetInputCharacteristic();
    fn test_field_GetOutputCharacteristic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputCharacteristic) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputCharacteristic)
            )
        );
    }
    test_field_GetOutputCharacteristic();
    fn test_field_GetInputMemoryType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputMemoryType) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputMemoryType)
            )
        );
    }
    test_field_GetInputMemoryType();
    fn test_field_GetVariadicInputMinArity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVariadicInputMinArity) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetVariadicInputMinArity)
            )
        );
    }
    test_field_GetVariadicInputMinArity();
    fn test_field_GetVariadicInputHomogeneity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVariadicInputHomogeneity) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetVariadicInputHomogeneity)
            )
        );
    }
    test_field_GetVariadicInputHomogeneity();
    fn test_field_GetVariadicOutputMinArity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVariadicOutputMinArity) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetVariadicOutputMinArity)
            )
        );
    }
    test_field_GetVariadicOutputMinArity();
    fn test_field_GetVariadicOutputHomogeneity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVariadicOutputHomogeneity) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetVariadicOutputHomogeneity)
            )
        );
    }
    test_field_GetVariadicOutputHomogeneity();
    fn test_field_CreateKernelV2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateKernelV2) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(CreateKernelV2)
            )
        );
    }
    test_field_CreateKernelV2();
    fn test_field_KernelComputeV2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelComputeV2) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(KernelComputeV2)
            )
        );
    }
    test_field_KernelComputeV2();
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_CUDA(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_ROCM(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_MIGraphX(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_Dnnl(
        options: *mut OrtSessionOptions,
        use_arena: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProvider_DML(
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr;
}
extern "C" {
    pub fn OrtSessionOptionsAppendExecutionProviderEx_DML(
        options: *mut OrtSessionOptions,
        dml_device: *mut IDMLDevice,
        cmd_queue: *mut ID3D12CommandQueue,
    ) -> OrtStatusPtr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtDmlApi {
    pub SessionOptionsAppendExecutionProvider_DML: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            device_id: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_DML1: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dml_device: *mut IDMLDevice,
            cmd_queue: *mut ID3D12CommandQueue,
        ) -> OrtStatusPtr,
    >,
    pub CreateGPUAllocationFromD3DResource: ::std::option::Option<
        unsafe extern "C" fn(
            d3d_resource: *mut ID3D12Resource,
            dml_resource: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FreeGPUAllocation: ::std::option::Option<
        unsafe extern "C" fn(dml_resource: *mut ::std::os::raw::c_void) -> OrtStatusPtr,
    >,
    pub GetD3D12ResourceFromAllocation: ::std::option::Option<
        unsafe extern "C" fn(
            provider: *mut OrtAllocator,
            dml_resource: *mut ::std::os::raw::c_void,
            d3d_resource: *mut *mut ID3D12Resource,
        ) -> OrtStatusPtr,
    >,
}
#[test]
fn bindgen_test_layout_OrtDmlApi() {
    assert_eq!(
        ::std::mem::size_of::<OrtDmlApi>(),
        40usize,
        concat!("Size of: ", stringify!(OrtDmlApi))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtDmlApi>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtDmlApi))
    );
    fn test_field_SessionOptionsAppendExecutionProvider_DML() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtDmlApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_DML) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtDmlApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_DML)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_DML();
    fn test_field_SessionOptionsAppendExecutionProvider_DML1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtDmlApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_DML1) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtDmlApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_DML1)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_DML1();
    fn test_field_CreateGPUAllocationFromD3DResource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtDmlApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateGPUAllocationFromD3DResource) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtDmlApi),
                "::",
                stringify!(CreateGPUAllocationFromD3DResource)
            )
        );
    }
    test_field_CreateGPUAllocationFromD3DResource();
    fn test_field_FreeGPUAllocation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtDmlApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeGPUAllocation) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtDmlApi),
                "::",
                stringify!(FreeGPUAllocation)
            )
        );
    }
    test_field_FreeGPUAllocation();
    fn test_field_GetD3D12ResourceFromAllocation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtDmlApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetD3D12ResourceFromAllocation) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtDmlApi),
                "::",
                stringify!(GetD3D12ResourceFromAllocation)
            )
        );
    }
    test_field_GetD3D12ResourceFromAllocation();
}
